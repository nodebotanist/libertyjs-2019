/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _wasm_imagemagick_esm_es2018_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wasm-imagemagick.esm-es2018.js */ \"./src/wasm-imagemagick.esm-es2018.js\");\n\n\nfunction setup () {\n\tvar canvas = document.querySelector('canvas')\n\tvar context = canvas.getContext('2d')\n\tvar video = document.querySelector('video')\n\treturn {\n\t\tvideo,\n\t\tcontext\n\t}\n}\nfunction triggerPhotoTake (media) {\n\tmedia.context.drawImage(media.video, 0, 0, 620, 480)\n\tdocument.querySelector('canvas').setAttribute('style', 'display: block')\n\tcanvasToUInt8(media)\n}\n\nasync function getMedia () {\n\tlet stream = null\n\ttry {\n\t\tstream = await navigator.mediaDevices.getUserMedia({\n\t\t\tvideo: true\n\t\t})\n\t\t// Grab elements, create settings, etc.\n\t\tvar video = document.querySelector('video')\n\t\t// video.src = window.URL.createObjectURL(stream)\n\t\tvideo.srcObject = stream\n\t\tvideo.play()\n\t} catch (err) {\n\t\tconsole.log(err)\n\t}\n}\n\nasync function canvasToUInt8 (media) {\n\treturn document.querySelector('canvas').toBlob(async function (blob) {\n\t\twindow.webcamUInt8 = new Uint8Array(await new Response(blob).arrayBuffer())\n\t\tconsole.log(window.webcamUInt8)\n\t}, 'image/png')\n}\n\nasync function loadImg (imgPath) {\n\tlet fetchedSourceImage = await fetch(imgPath)\n\tlet arrayBuffer = await fetchedSourceImage.arrayBuffer()\n\treturn new Uint8Array(arrayBuffer)\n}\n\nfunction determineManipulationArray (manipulationType) {\n\tlet manipulationArray = ['-resize', '620x480>']\n\tlet effect = []\n\tswitch (manipulationType) {\n\tcase 'rotate-right':\n\t\teffect = ['-rotate', '90']\n\t\tbreak\n\tcase 'rotate-left':\n\t\teffect = ['-rotate', '-90']\n\t\tbreak\n\tcase 'grayscale':\n\t\teffect = ['-set', 'colorspace', 'LinearGray']\n\t\tbreak\n\tcase 'add-contrast':\n\t\teffect = [ '+contrast' ]\n\t\tbreak\n\tcase 'remove-contrast':\n\t\teffect = ['-contrast']\n\t\tbreak\n\tcase 'blur':\n\t\teffect = ['-blur', '0x4']\n\t\tbreak\n\t}\n\treturn manipulationArray.concat(effect)\n}\n\nasync function manipulateImg (sourceBytes, manipulationArray) {\n\tconsole.log(manipulationArray)\n\tlet processedFiles = await _wasm_imagemagick_esm_es2018_js__WEBPACK_IMPORTED_MODULE_0__[\"Call\"]([{\n\t\t'name': 'srcFile.png',\n\t\t'content': sourceBytes\n\t}], ['convert', 'srcFile.png'].concat(manipulationArray).concat(['out.png']))\n\treturn processedFiles[0]\n}\n\nfunction outputMagickedImg (outputImg) {\n\tdocument.querySelector('#post-magicked').src = URL.createObjectURL(outputImg['blob'])\n}\n\nasync function startManipulation (event) {\n\tlet ready = false\n\tlet sourceBytes\n\tif (document.querySelector('#pre-magicked').src && document.querySelector('select').value !== 'webcam') {\n\t\tconsole.log('image')\n\t\tready = true\n\t\tsourceBytes = await loadImg(document.querySelector('#pre-magicked').src)\n\t} else if (document.querySelector('select').value === 'webcam') {\n\t\tconsole.log('webcam')\n\t\tready = true\n\t\tsourceBytes = window.webcamUInt8\n\t}\n\tif(ready) {\n\t\tconsole.log('type1', event.target.value)\n\t\tlet manipulationMatrix = determineManipulationArray(event.target.value)\n\t\tlet outputImg = await manipulateImg(sourceBytes, manipulationMatrix)\n\t\toutputMagickedImg(outputImg)\n\t}\n}\n\n(function () {\n\tgetMedia()\n\tlet media = setup()\n\tdocument.querySelector('select').addEventListener('change', (event) => {\n\t\tif (event.target.value === 'webcam') {\n\t\t\tdocument.querySelector('#pre-magicked').setAttribute('style', 'display: none')\n\t\t\tdocument.querySelector('canvas').setAttribute('style', 'display: block')\n\t\t\ttriggerPhotoTake(media)\n\t\t} else {\n\t\t\tdocument.querySelector('canvas').setAttribute('style', 'display: none')\n\t\t\tdocument.querySelector('#pre-magicked').setAttribute('style', 'display: block')\n\t\t\tlet imgPath = `./img/${event.target.value}.jpg`\n\t\t\tdocument.querySelector('#pre-magicked').src = imgPath\n\t\t}\n\t})\n\tlet buttons = document.querySelectorAll('button')\n\tbuttons.forEach((button) => {\n\t\tbutton.addEventListener('click', startManipulation)\n\t})\n})()\n\n\n//# sourceURL=webpack:///./src/app.js?");

/***/ }),

/***/ "./src/wasm-imagemagick.esm-es2018.js":
/*!********************************************!*\
  !*** ./src/wasm-imagemagick.esm-es2018.js ***!
  \********************************************/
/*! exports provided: executeOne, isExecuteCommand, asExecuteConfig, executeAndReturnOutputFile, addExecuteListener, execute, createImageHome, newExecutionContext, Call, call, arrayToCli, cliToArray, asCommand, blobToString, isInputFile, isOutputFile, readFileAsText, isImage, buildInputFile, asInputFile, asOutputFile, getFileName, getFileNameExtension, loadImageElement, buildImageSrc, getInputFilesFromHtmlInputElement, getPixelColor, builtInImageNames, getBuiltInImages, getBuiltInImage, compare, compareNumber, extractInfo, getConfigureFolders, knownSupportedReadWriteImageFormats, IMAlign, IMAlpha, IMAutoThreshold, IMBoolean, IMCache, IMChannel, IMClass, IMClipPath, IMColorspace, IMCommand, IMCompliance, IMComplex, IMCompose, IMCompress, IMDataType, IMDebug, IMDecoration, IMDirection, IMDispose, IMDistort, IMDither, IMEndian, IMEvaluate, IMFillRule, IMFilter, IMFunction, IMGradient, IMGravity, IMIntensity, IMIntent, IMInterlace, IMInterpolate, IMKernel, IMLayers, IMLineCap, IMLineJoin, IMList, IMLogEvent, IMLog, IMMethod, IMMetric, IMMode, IMMorphology, IMModule, IMNoise, IMOrientation, IMPixelChannel, IMPixelIntensity, IMPixelMask, IMPixelTrait, IMPolicyDomain, IMPolicyRights, IMPreview, IMPrimitive, IMQuantumFormat, IMSparseColor, IMStatistic, IMStorage, IMStretch, IMStyle, IMTool, IMType, IMUnits, IMValidate, IMVirtualPixel, IMWeight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"executeOne\", function() { return executeOne$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isExecuteCommand\", function() { return isExecuteCommand$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"asExecuteConfig\", function() { return asExecuteConfig$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"executeAndReturnOutputFile\", function() { return executeAndReturnOutputFile$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addExecuteListener\", function() { return addExecuteListener$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"execute\", function() { return execute$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createImageHome\", function() { return createImageHome$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"newExecutionContext\", function() { return newExecutionContext$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Call\", function() { return Call; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"call\", function() { return call; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arrayToCli\", function() { return arrayToCli; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cliToArray\", function() { return cliToArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"asCommand\", function() { return asCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"blobToString\", function() { return blobToString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isInputFile\", function() { return isInputFile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isOutputFile\", function() { return isOutputFile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"readFileAsText\", function() { return readFileAsText; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isImage\", function() { return isImage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildInputFile\", function() { return buildInputFile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"asInputFile\", function() { return asInputFile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"asOutputFile\", function() { return asOutputFile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFileName\", function() { return getFileName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFileNameExtension\", function() { return getFileNameExtension; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadImageElement\", function() { return loadImageElement$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildImageSrc\", function() { return buildImageSrc$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getInputFilesFromHtmlInputElement\", function() { return getInputFilesFromHtmlInputElement$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPixelColor\", function() { return getPixelColor$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"builtInImageNames\", function() { return builtInImageNames$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getBuiltInImages\", function() { return getBuiltInImages$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getBuiltInImage\", function() { return getBuiltInImage$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"compare\", function() { return compare$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"compareNumber\", function() { return compareNumber$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extractInfo\", function() { return extractInfo$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getConfigureFolders\", function() { return getConfigureFolders$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"knownSupportedReadWriteImageFormats\", function() { return knownSupportedReadWriteImageFormats$$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMAlign\", function() { return IMAlign; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMAlpha\", function() { return IMAlpha; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMAutoThreshold\", function() { return IMAutoThreshold; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMBoolean\", function() { return IMBoolean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMCache\", function() { return IMCache; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMChannel\", function() { return IMChannel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMClass\", function() { return IMClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMClipPath\", function() { return IMClipPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMColorspace\", function() { return IMColorspace; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMCommand\", function() { return IMCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMCompliance\", function() { return IMCompliance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMComplex\", function() { return IMComplex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMCompose\", function() { return IMCompose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMCompress\", function() { return IMCompress; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMDataType\", function() { return IMDataType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMDebug\", function() { return IMDebug; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMDecoration\", function() { return IMDecoration; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMDirection\", function() { return IMDirection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMDispose\", function() { return IMDispose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMDistort\", function() { return IMDistort; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMDither\", function() { return IMDither; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMEndian\", function() { return IMEndian; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMEvaluate\", function() { return IMEvaluate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMFillRule\", function() { return IMFillRule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMFilter\", function() { return IMFilter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMFunction\", function() { return IMFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMGradient\", function() { return IMGradient; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMGravity\", function() { return IMGravity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMIntensity\", function() { return IMIntensity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMIntent\", function() { return IMIntent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMInterlace\", function() { return IMInterlace; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMInterpolate\", function() { return IMInterpolate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMKernel\", function() { return IMKernel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMLayers\", function() { return IMLayers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMLineCap\", function() { return IMLineCap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMLineJoin\", function() { return IMLineJoin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMList\", function() { return IMList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMLogEvent\", function() { return IMLogEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMLog\", function() { return IMLog; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMMethod\", function() { return IMMethod; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMMetric\", function() { return IMMetric; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMMode\", function() { return IMMode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMMorphology\", function() { return IMMorphology; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMModule\", function() { return IMModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMNoise\", function() { return IMNoise; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMOrientation\", function() { return IMOrientation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMPixelChannel\", function() { return IMPixelChannel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMPixelIntensity\", function() { return IMPixelIntensity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMPixelMask\", function() { return IMPixelMask; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMPixelTrait\", function() { return IMPixelTrait; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMPolicyDomain\", function() { return IMPolicyDomain; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMPolicyRights\", function() { return IMPolicyRights; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMPreview\", function() { return IMPreview; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMPrimitive\", function() { return IMPrimitive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMQuantumFormat\", function() { return IMQuantumFormat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMSparseColor\", function() { return IMSparseColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMStatistic\", function() { return IMStatistic; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMStorage\", function() { return IMStorage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMStretch\", function() { return IMStretch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMStyle\", function() { return IMStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMTool\", function() { return IMTool; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMType\", function() { return IMType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMUnits\", function() { return IMUnits; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMValidate\", function() { return IMValidate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMVirtualPixel\", function() { return IMVirtualPixel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMWeight\", function() { return IMWeight; });\nconst pMap = (iterable, mapper, options) => new Promise((resolve, reject) => {\n\toptions = Object.assign({\n\t\tconcurrency: Infinity\n\t}, options);\n\n\tif (typeof mapper !== 'function') {\n\t\tthrow new TypeError('Mapper function is required');\n\t}\n\n\tconst {concurrency} = options;\n\n\tif (!(typeof concurrency === 'number' && concurrency >= 1)) {\n\t\tthrow new TypeError(`Expected \\`concurrency\\` to be a number from 1 and up, got \\`${concurrency}\\` (${typeof concurrency})`);\n\t}\n\n\tconst ret = [];\n\tconst iterator = iterable[Symbol.iterator]();\n\tlet isRejected = false;\n\tlet isIterableDone = false;\n\tlet resolvingCount = 0;\n\tlet currentIndex = 0;\n\n\tconst next = () => {\n\t\tif (isRejected) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextItem = iterator.next();\n\t\tconst i = currentIndex;\n\t\tcurrentIndex++;\n\n\t\tif (nextItem.done) {\n\t\t\tisIterableDone = true;\n\n\t\t\tif (resolvingCount === 0) {\n\t\t\t\tresolve(ret);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tresolvingCount++;\n\n\t\tPromise.resolve(nextItem.value)\n\t\t\t.then(element => mapper(element, i))\n\t\t\t.then(\n\t\t\t\tvalue => {\n\t\t\t\t\tret[i] = value;\n\t\t\t\t\tresolvingCount--;\n\t\t\t\t\tnext();\n\t\t\t\t},\n\t\t\t\terror => {\n\t\t\t\t\tisRejected = true;\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t);\n\t};\n\n\tfor (let i = 0; i < concurrency; i++) {\n\t\tnext();\n\n\t\tif (isIterableDone) {\n\t\t\tbreak;\n\t\t}\n\t}\n});\n\nvar pMap_1 = pMap;\nvar default_1 = pMap;\npMap_1.default = default_1;\n\n// internal misc utilities\nfunction values(object) {\n    return Object.keys(object).map(name => object[name]);\n}\nfunction flat(arr) {\n    return arr.reduce((a, b) => a.concat(b));\n}\n// export function trimNoNewLines(s: string): string {\n//   return s.replace(/^ +/, '').replace(/ +$/, '')\n// }\n\n// TODO: store variables from text file output and reuse them. example:\n// `\n// color=$(convert filename.png -format \"%[pixel:p{0,0}]\" info:foo.txt)\n// convert filename.png -alpha off -bordercolor $color -border 1 \\\n//     \\( +clone -fuzz 30% -fill none -floodfill +0+0 $color \\\n//        -alpha extract -geometry 200% -blur 0x0.5 \\\n//        -morphology erode square:1 -geometry 50% \\) \\\n//     -compose CopyOpacity -composite -shave 1 outputfilename.png\n// `\n/**\n * Generates a valid command line command from given `string[]` command. Works with a single command.\n */\nfunction arrayToCliOne(command) {\n    return command\n        .map(c => c + '')\n        // if it contain spaces\n        .map(c => (c.trim().match(/\\s/)) ? `'${c}'` : c)\n        // escape parenthesis\n        .map(c => c.trim() === '(' ? '\\\\(' : c.trim() === ')' ? '\\\\)' : c)\n        .join(' ');\n}\n/**\n * Generates a valid command line string from given `string[]` that is compatible with  {@link call}. Works with multiple\n * commands by separating  them with new lines and support comand splitting in new lines using `\\`.\n * See {@link ExecuteCommand} for more information.\n */\nfunction arrayToCli(command) {\n    const cmd = typeof command[0] === 'string' ? [command] : command;\n    return cmd.map(arrayToCliOne).join('\\n');\n}\n/**\n * Generates a command in the form of array of strings, compatible with {@link call} from given command line string . The string must contain only one command (no newlines).\n */\nfunction cliToArrayOne(cliCommand) {\n    let inString = false;\n    const spaceIndexes = [0];\n    for (let index = 0; index < cliCommand.length; index++) {\n        const c = cliCommand[index];\n        if (c.match(/[\\s]/im) && !inString) {\n            spaceIndexes.push(index);\n        }\n        if (c === `'`) {\n            inString = !inString;\n        }\n    }\n    spaceIndexes.push(cliCommand.length);\n    const command = spaceIndexes\n        .map((spaceIndex, i) => cliCommand.substring(i === 0 ? 0 : spaceIndexes[i - 1], spaceIndexes[i]).trim())\n        .filter(s => !!s)\n        // remove quotes\n        .map(s => s.startsWith(`'`) ? s.substring(1, s.length) : s)\n        .map(s => s.endsWith(`'`) ? s.substring(0, s.length - 1) : s)\n        //  unescape parenthesis\n        .map(s => s === `\\\\(` ? `(` : s === `\\\\)` ? `)` : s);\n    return command;\n}\n/**\n * Generates a command in the form of `string[][]` that is compatible with {@link call} from given command line string.\n * This works for strings containing multiple commands in different lines. and also respect `\\` character for continue the same\n * command in a new line. See {@link ExecuteCommand} for more information.\n */\nfunction cliToArray(cliCommand) {\n    const lines = cliCommand.split('\\n')\n        .map(s => s.trim()).map(cliToArrayOne)\n        .filter(a => a && a.length);\n    const result = [];\n    let currentCommand = [];\n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        if (line[line.length - 1] !== '\\\\') {\n            currentCommand = currentCommand.concat(line);\n            result.push(currentCommand);\n            currentCommand = [];\n        }\n        else {\n            currentCommand = currentCommand.concat(line.slice(0, line.length - 1));\n        }\n    }\n    return result;\n}\n/**\n * Makes sure that given {@link ExecuteCommand}, in whatever syntax, is transformed to the form `string[][]` that is compatible with {@link call}\n */\nfunction asCommand(c) {\n    if (typeof c === 'string') {\n        return asCommand([c]);\n    }\n    if (!c[0]) {\n        return [];\n    }\n    if (typeof c[0] === 'string') {\n        return flat(c.map((subCommand) => cliToArray(subCommand)));\n    }\n    return c;\n}\n\nfunction blobToUint8Array(blob) {\n    return new Promise(resolve => {\n        const fileReader = new FileReader();\n        fileReader.onload = event => {\n            const result = event.target.result;\n            resolve(new Uint8Array(result));\n        };\n        fileReader.readAsArrayBuffer(blob);\n    });\n}\nfunction blobToString(blb) {\n    return new Promise(resolve => {\n        const reader = new FileReader();\n        reader.addEventListener('loadend', e => {\n            const text = e.srcElement.result;\n            resolve(text);\n        });\n        reader.readAsText(blb);\n    });\n}\nfunction isInputFile(file) {\n    return !!file.content;\n}\nfunction isOutputFile(file) {\n    return !!file.blob;\n}\nfunction uint8ArrayToString(arr, charset = 'utf-8') {\n    return new TextDecoder(charset).decode(arr);\n}\n/**\n * Read files as string. Useful when files contains plain text like in the output file info.txt of `convert logo: -format '%[pixel:p{0,0}]' info:info.txt`\n */\nasync function readFileAsText(file) {\n    if (isInputFile(file)) {\n        return uint8ArrayToString(file.content);\n    }\n    if (isOutputFile(file)) {\n        return await blobToString(file.blob);\n    }\n}\nasync function isImage(file) {\n    const { exitCode } = await execute$$1({ inputFiles: [await asInputFile(file)], commands: `identify ${file.name}` });\n    return exitCode === 0;\n}\n/**\n * Builds a new {@link MagickInputFile} by fetching the content of given url and optionally naming the file using given name\n * or extracting the file name from the url otherwise.\n */\nasync function buildInputFile(url, name = getFileName(url)) {\n    const fetchedSourceImage = await fetch(url);\n    const arrayBuffer = await fetchedSourceImage.arrayBuffer();\n    const content = new Uint8Array(arrayBuffer);\n    return { name, content };\n}\nfunction uint8ArrayToBlob(arr) {\n    return new Blob([arr]);\n}\nasync function outputFileToInputFile(file, name = file.name) {\n    return {\n        name,\n        content: await blobToUint8Array(file.blob),\n    };\n}\nfunction inputFileToOutputFile(file, name = file.name) {\n    return {\n        name,\n        blob: uint8ArrayToBlob(file.content),\n    };\n}\nasync function asInputFile(f, name = f.name) {\n    let inputFile;\n    if (isOutputFile(f)) {\n        inputFile = await outputFileToInputFile(f);\n    }\n    else {\n        inputFile = f;\n    }\n    inputFile.name = name;\n    return inputFile;\n}\nasync function asOutputFile(f, name = f.name) {\n    let outputFile;\n    if (isInputFile(f)) {\n        outputFile = inputFileToOutputFile(f);\n    }\n    else {\n        outputFile = f;\n    }\n    outputFile.name = name;\n    return outputFile;\n}\nfunction getFileName(url) {\n    try {\n        return decodeURIComponent(new URL(url).pathname.split('/').pop());\n    }\n    catch (error) {\n        const s = `http://foo.com/${url}`;\n        try {\n            return decodeURIComponent(new URL(s).pathname.split('/').pop());\n        }\n        catch (error) {\n            return url;\n        }\n    }\n}\nfunction getFileNameExtension(filePathOrUrl) {\n    const s = getFileName(filePathOrUrl);\n    return s.substring(s.lastIndexOf('.') + 1, s.length);\n}\n\n// utilities related to HTML (img) elements\n/**\n * Will load given html img element src with the inline image content.\n * @param image the image to be loaded\n * @param el the html image element in which to load the image\n * @param forceBrowserSupport if true and the image extension is not supported by browsers, it will convert the image to png\n * and return that src so it can be shown in browsers\n */\nasync function loadImageElement$$1(image, el, forceBrowserSupport = false) {\n    el.src = await buildImageSrc$$1(image, forceBrowserSupport);\n}\n/**\n * Return a string with the inline image content, suitable to be used to assign to an html img src attribute. See {@link loadImageElement}.\n * @param forceBrowserSupport if true and the image extension is not supported by browsers, it will convert the image to png\n * and return that src so it can be shown in browsers\n */\nasync function buildImageSrc$$1(image, forceBrowserSupport = false) {\n    let img = image;\n    const extension = getFileNameExtension(image.name);\n    if (!extension || forceBrowserSupport && browserSupportedImageExtensions.indexOf(extension) === -1) {\n        const { outputFiles } = await execute$$1({ inputFiles: [await asInputFile(image)], commands: `convert ${image.name} output.png` });\n        outputFiles[0].name = image.name;\n        img = outputFiles[0];\n    }\n    const outputFile = await asOutputFile(img);\n    return URL.createObjectURL(outputFile.blob);\n}\n/**\n * Build `MagickInputFile[]` from given HTMLInputElement of type=file that user may used to select several files\n */\nasync function getInputFilesFromHtmlInputElement$$1(el) {\n    const files = await inputFileToUint8Array(el);\n    return files.map(f => ({ name: f.file.name, content: f.content }));\n}\nconst browserSupportedImageExtensions = ['gif', 'png', 'jpg', 'webp'];\nfunction inputFileFiles(el) {\n    const files = [];\n    for (let i = 0; i < el.files.length; i++) {\n        const file = el.files.item(i);\n        files.push(file);\n    }\n    return files;\n}\nasync function inputFileToUint8Array(el) {\n    return Promise.all(inputFileFiles(el).map(async (file) => {\n        const content = await new Promise(resolve => {\n            const reader = new FileReader();\n            reader.addEventListener('loadend', e => {\n                resolve(new Uint8Array(reader.result));\n            });\n            reader.readAsArrayBuffer(file);\n        });\n        return { file, content };\n    }));\n}\n\nasync function getPixelColor$$1(img, x, y) {\n    const file = await executeAndReturnOutputFile$$1({ inputFiles: [await asInputFile(img)], commands: `convert ${img.name} -format '%[pixel:p{${x},${y}}]' info:info.txt` });\n    return await readFileAsText(file);\n}\n\nlet builtInImages;\nconst builtInImageNames$$1 = ['rose:', 'logo:', 'wizard:', 'granite:', 'netscape:'];\n/**\n * Gets ImageMagick built-in images like `rose:`, `logo:`, etc in the form of {@link MagickInputFile}s\n */\nasync function getBuiltInImages$$1() {\n    if (!builtInImages) {\n        builtInImages = await pMap_1(builtInImageNames$$1, async (name) => {\n            const info = await extractInfo$$1(name);\n            const { outputFiles } = await execute$$1({ commands: `convert ${name} ${`output1.${info[0].image.format.toLowerCase()}`}` });\n            outputFiles[0].name = name;\n            return await asInputFile(outputFiles[0]);\n        });\n    }\n    return builtInImages;\n}\n/**\n * shortcut of {@link getBuiltInImages} to get a single image by name\n */\nasync function getBuiltInImage$$1(name) {\n    const images = await getBuiltInImages$$1();\n    return images.find(f => f.name === name);\n}\n\n/**\n * Compare the two images and return true if they are equal visually. Optionally, a margin of error can be provided using `fuzz`\n */\nasync function compare$$1(img1, img2, fuzz = 0.015) {\n    const identical = await compareNumber$$1(img1, img2);\n    return identical <= fuzz;\n}\nasync function compareNumber$$1(img1, img2) {\n    const imgs = [];\n    let name1;\n    let name2;\n    if (typeof img1 !== 'string') {\n        const inputFile = await asInputFile(img1);\n        imgs.push(inputFile);\n        name1 = inputFile.name;\n    }\n    else {\n        name1 = img1;\n    }\n    if (typeof img2 !== 'string') {\n        const inputFile = await asInputFile(img2);\n        imgs.push(inputFile);\n        name2 = inputFile.name;\n    }\n    else {\n        name2 = img2;\n    }\n    const result = await Call(imgs, ['convert', name1, name2, '-resize', '256x256^!', '-metric', 'RMSE', '-format', '%[distortion]', '-compare', 'info:info.txt']);\n    const n = await blobToString(result[0].blob);\n    return parseFloat(n);\n}\n\n/**\n * Execute `convert $IMG info.json` to extract image metadata. Returns the parsed info.json file contents\n * @param img could be a string in case you want to extract information about built in images like `rose:`\n */\nasync function extractInfo$$1(img) {\n    // TODO: support several input images - we are already returning an array\n    let name;\n    let imgs;\n    if (typeof img !== 'string') {\n        imgs = [await asInputFile(img)];\n        name = imgs[0].name;\n    }\n    else {\n        name = img;\n        imgs = [];\n    }\n    const processedFiles = await Call(imgs, ['convert', name, 'info.json']);\n    try {\n        return JSON.parse(await blobToString(processedFiles[0].blob));\n    }\n    catch (ex) {\n        return [{ error: ex }];\n    }\n}\n\nasync function getConfigureFolders$$1() {\n    const result = await execute$$1(`convert -debug configure rose: info:`);\n    const contains = `Searching for configure file:`;\n    const folders = result.stderr\n        .filter(line => line.includes(contains))\n        .map(line => line.substring(line.indexOf(contains) + contains.length, line.length))\n        .map(s => s.replace(/\\/\\//g, '/'))\n        .map(s => s.substring(0, s.lastIndexOf('/')))\n        .map(s => s.replace(/\"/g, '').trim());\n    return folders;\n}\n// has some heuristic information regarding features (not) supported by wasm-imagemagick, for example, image formats\n// heads up - all images spec/assets/to_rotate.* where converted using gimp unless explicitly saying otherwise\n/**\n * list of image formats that are known to be supported by wasm-imagemagick. See `spec/formatSpec.ts`\n */\nconst knownSupportedReadWriteImageFormats$$1 = [\n    'jpg', 'png',\n    'psd',\n    'tiff', 'xcf', 'gif', 'bmp', 'tga', 'miff', 'ico', 'dcm', 'xpm', 'pcx',\n    //  'pix', // gives error\n    'fits',\n    // 'djvu', // read only support\n    'ppm',\n    'pgm',\n    'pfm',\n    'mng',\n    'hdr',\n    'dds',\n    'otb',\n    'txt',\n];\n\n/**\n * Execute first command in given config.\n */\nasync function executeOne$$1(configOrCommand) {\n    const config = asExecuteConfig$$1(configOrCommand);\n    let result = {\n        stderr: [],\n        stdout: [],\n        outputFiles: [],\n        exitCode: 1,\n    };\n    try {\n        config.inputFiles = config.inputFiles || [];\n        const command = asCommand(config.commands)[0];\n        const t0 = performance.now();\n        executeListeners.forEach(listener => listener.beforeExecute({ command, took: performance.now() - t0, id: t0 }));\n        result = await call(config.inputFiles, command.map(c => c + ''));\n        executeListeners.forEach(listener => listener.afterExecute({ command, took: performance.now() - t0, id: t0 }));\n        if (result.exitCode) {\n            return Object.assign({}, result, { errors: ['exit code: ' + result.exitCode + ' stderr: ' + result.stderr.join('\\n')] });\n        }\n        return Object.assign({}, result, { errors: [undefined] });\n    }\n    catch (error) {\n        return Object.assign({}, result, { errors: [error + ', exit code: ' + result.exitCode + ', stderr: ' + result.stderr.join('\\n')] });\n    }\n}\nfunction isExecuteCommand$$1(arg) {\n    return !!arg.commands;\n}\n/**\n * Transform  `configOrCommand: ExecuteConfig | ExecuteCommand` to a valid ExecuteConfig object\n */\nfunction asExecuteConfig$$1(arg) {\n    if (isExecuteCommand$$1(arg)) {\n        return arg;\n    }\n    return {\n        inputFiles: [],\n        commands: arg,\n    };\n}\n/**\n * `execute()` shortcut that useful for commands that return only one output file or when only one particular output file is relevant.\n * @param outputFileName optionally user can give the desired output file name\n * @returns If `outputFileName` is given the file with that name, the first output file otherwise or undefined\n * if no file match, or no output files where generated (like in an error).\n */\nasync function executeAndReturnOutputFile$$1(configOrCommand, outputFileName) {\n    const config = asExecuteConfig$$1(configOrCommand);\n    const result = await execute$$1(config);\n    return outputFileName ? result.outputFiles.find(f => f.name === outputFileName) : (result.outputFiles.length && result.outputFiles[0] || undefined);\n}\nconst executeListeners = [];\nfunction addExecuteListener$$1(l) {\n    executeListeners.push(l);\n}\n/**\n * Execute all commands in given config serially in order. Output files from a command become available as\n * input files in next commands. In the following example we execute two commands. Notice how the second one uses `image2.png` which was the output file of the first one:\n *\n * ```ts\n * const { outputFiles, exitCode, stderr} = await execute({\n *   inputFiles: [await buildInputFile('fn.png', 'image1.png')],\n *   commands: `\n *     convert image1.png -bordercolor #ffee44 -background #eeff55 +polaroid image2.png\n *     convert image2.png -fill #997711 -tint 55 image3.jpg\n * `\n * })\n * if (exitCode) {\n *   alert(`There was an error with the command: ${stderr.join('\\n')}`)\n * }\n * else {\n *   await loadImageElement(outputFiles.find(f => f.name==='image3.jpg'), document.getElementById('outputImage'))\n * }\n * ```\n *\n * See {@link ExecuteCommand} for different command syntax supported.\n *\n * See {@link ExecuteResult} for details on the object returned\n */\nasync function execute$$1(configOrCommand) {\n    const config = asExecuteConfig$$1(configOrCommand);\n    config.inputFiles = config.inputFiles || [];\n    const allOutputFiles = {};\n    const allInputFiles = {};\n    config.inputFiles.forEach(f => {\n        allInputFiles[f.name] = f;\n    });\n    let allErrors = [];\n    const results = [];\n    let allStdout = [];\n    let allStderr = [];\n    async function mapper(c) {\n        const thisConfig = {\n            inputFiles: values(allInputFiles),\n            commands: [c],\n        };\n        const result = await executeOne$$1(thisConfig);\n        results.push(result);\n        allErrors = allErrors.concat(result.errors || []);\n        allStdout = allStdout.concat(result.stdout || []);\n        allStderr = allStderr.concat(result.stderr || []);\n        await pMap_1(result.outputFiles, async (f) => {\n            allOutputFiles[f.name] = f;\n            const inputFile = await asInputFile(f);\n            allInputFiles[inputFile.name] = inputFile;\n        });\n    }\n    const commands = asCommand(config.commands);\n    await pMap_1(commands, mapper, { concurrency: 1 });\n    const resultWithError = results.find(r => r.exitCode !== 0);\n    return {\n        outputFiles: values(allOutputFiles),\n        errors: allErrors,\n        results,\n        stdout: allStdout,\n        stderr: allStderr,\n        exitCode: resultWithError ? resultWithError.exitCode : 0,\n    };\n}\n\nclass ImageHomeImpl {\n    constructor() {\n        this.images = {};\n        this.builtInImagesAdded = false;\n    }\n    get(name) {\n        return this.images[name];\n    }\n    remove(names) {\n        const result = [];\n        Object.keys(this.images).forEach(name => {\n            if (names.indexOf(name) !== -1) {\n                result.push(this.images[name]);\n                delete this.images[name];\n            }\n        });\n        return result;\n    }\n    async getAll() {\n        return await Promise.all(values(this.images));\n    }\n    register(file, name = file.name) {\n        const promise = asInputFile(file);\n        this.images[name] = promise;\n        this.images[name].then(() => {\n            promise.resolved = true;\n        });\n        return promise;\n    }\n    isRegistered(name, andReady = true) {\n        return this.images[name] && (andReady && this.images[name].resolved);\n    }\n    async addBuiltInImages() {\n        if (!this.builtInImagesAdded) {\n            await pMap_1(await getBuiltInImages$$1(), img => this.register(img));\n            this.builtInImagesAdded = true;\n        }\n    }\n}\nfunction createImageHome$$1() { return new ImageHomeImpl(); }\n\nclass ExecutionContextImpl {\n    constructor(imageHome = createImageHome$$1()) {\n        this.imageHome = imageHome;\n    }\n    async execute(configOrCommands) {\n        const config = asExecuteConfig$$1(configOrCommands);\n        config.inputFiles.forEach(f => {\n            this.imageHome.register(f);\n        });\n        const inputFiles = await this.imageHome.getAll();\n        const result = await execute$$1(Object.assign({}, config, { inputFiles }));\n        result.outputFiles.forEach(f => {\n            this.imageHome.register(f);\n        });\n        return result;\n    }\n    addFiles(files) {\n        files.forEach(f => this.imageHome.register(f));\n    }\n    async getAllFiles() {\n        return await this.imageHome.getAll();\n    }\n    async getFile(name) {\n        return await this.imageHome.get(name);\n    }\n    async addBuiltInImages() {\n        return this.imageHome.addBuiltInImages();\n    }\n    removeFiles(names) {\n        return this.imageHome.remove(names);\n    }\n    static create(inheritFrom) {\n        if (inheritFrom && !inheritFrom.imageHome) {\n            throw new Error('Dont know how to inherit from other ExecutionContext implementation than this one');\n        }\n        return new ExecutionContextImpl(inheritFrom && inheritFrom.imageHome);\n    }\n}\nfunction newExecutionContext$$1(inheritFrom) {\n    return ExecutionContextImpl.create(inheritFrom);\n}\n\n/**\n * {@link call} shortcut that only returns the output files.\n */\nasync function Call(inputFiles, command) {\n    const result = await call(inputFiles, command);\n    return result.outputFiles;\n}\n/**\n * Low level execution function. All the other functions like [execute](https://github.com/KnicKnic/WASM-ImageMagick/tree/master/apidocs#execute)\n * ends up calling this one. It accept only one command and only in the form of array of strings.\n */\nfunction call(inputFiles, command) {\n    const request = {\n        files: inputFiles,\n        args: command,\n        requestNumber: magickWorkerPromisesKey,\n    };\n    const promise = CreatePromiseEvent();\n    magickWorkerPromises[magickWorkerPromisesKey] = promise;\n    magickWorker.postMessage(request);\n    magickWorkerPromisesKey++;\n    return promise;\n}\nfunction CreatePromiseEvent() {\n    let resolver;\n    let rejecter;\n    const emptyPromise = new Promise((resolve, reject) => {\n        resolver = resolve;\n        rejecter = reject;\n    });\n    emptyPromise.resolve = resolver;\n    emptyPromise.reject = rejecter;\n    return emptyPromise;\n}\nconst magickWorker = new Worker('magick.js');\nconst magickWorkerPromises = {};\nlet magickWorkerPromisesKey = 1;\n// handle responses as they stream in after being outputFiles by image magick\nmagickWorker.onmessage = e => {\n    const response = e.data;\n    const promise = magickWorkerPromises[response.requestNumber];\n    delete magickWorkerPromises[response.requestNumber];\n    const result = {\n        outputFiles: response.outputFiles,\n        stdout: response.stdout,\n        stderr: response.stderr,\n        exitCode: response.exitCode || 0,\n    };\n    promise.resolve(result);\n};\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMAlign;\n(function (IMAlign) {\n    IMAlign[\"Center\"] = \"Center\";\n    IMAlign[\"End\"] = \"End\";\n    IMAlign[\"Left\"] = \"Left\";\n    IMAlign[\"Middle\"] = \"Middle\";\n    IMAlign[\"Right\"] = \"Right\";\n    IMAlign[\"Start\"] = \"Start\";\n})(IMAlign || (IMAlign = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMAlpha;\n(function (IMAlpha) {\n    IMAlpha[\"Activate\"] = \"Activate\";\n    IMAlpha[\"Associate\"] = \"Associate\";\n    IMAlpha[\"Background\"] = \"Background\";\n    IMAlpha[\"Copy\"] = \"Copy\";\n    IMAlpha[\"Deactivate\"] = \"Deactivate\";\n    IMAlpha[\"Discrete\"] = \"Discrete\";\n    IMAlpha[\"Disassociate\"] = \"Disassociate\";\n    IMAlpha[\"Extract\"] = \"Extract\";\n    IMAlpha[\"Off\"] = \"Off\";\n    IMAlpha[\"On\"] = \"On\";\n    IMAlpha[\"Opaque\"] = \"Opaque\";\n    IMAlpha[\"Remove\"] = \"Remove\";\n    IMAlpha[\"Set\"] = \"Set\";\n    IMAlpha[\"Shape\"] = \"Shape\";\n    IMAlpha[\"Transparent\"] = \"Transparent\";\n})(IMAlpha || (IMAlpha = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMAutoThreshold;\n(function (IMAutoThreshold) {\n    IMAutoThreshold[\"Kapur\"] = \"Kapur\";\n    IMAutoThreshold[\"OTSU\"] = \"OTSU\";\n    IMAutoThreshold[\"Triangle\"] = \"Triangle\";\n})(IMAutoThreshold || (IMAutoThreshold = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMBoolean;\n(function (IMBoolean) {\n    IMBoolean[\"False\"] = \"False\";\n    IMBoolean[\"True\"] = \"True\";\n    IMBoolean[\"0_\"] = \"0\";\n    IMBoolean[\"1_\"] = \"1\";\n})(IMBoolean || (IMBoolean = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMCache;\n(function (IMCache) {\n    IMCache[\"Disk\"] = \"Disk\";\n    IMCache[\"Distributed\"] = \"Distributed\";\n    IMCache[\"Map\"] = \"Map\";\n    IMCache[\"Memory\"] = \"Memory\";\n    IMCache[\"Ping\"] = \"Ping\";\n})(IMCache || (IMCache = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMChannel;\n(function (IMChannel) {\n    IMChannel[\"All\"] = \"All\";\n    IMChannel[\"Sync\"] = \"Sync\";\n    IMChannel[\"Default\"] = \"Default\";\n    IMChannel[\"A\"] = \"A\";\n    IMChannel[\"Alpha\"] = \"Alpha\";\n    IMChannel[\"Black\"] = \"Black\";\n    IMChannel[\"B\"] = \"B\";\n    IMChannel[\"Blue\"] = \"Blue\";\n    IMChannel[\"C\"] = \"C\";\n    IMChannel[\"Chroma\"] = \"Chroma\";\n    IMChannel[\"Cyan\"] = \"Cyan\";\n    IMChannel[\"Gray\"] = \"Gray\";\n    IMChannel[\"G\"] = \"G\";\n    IMChannel[\"Green\"] = \"Green\";\n    IMChannel[\"H\"] = \"H\";\n    IMChannel[\"Hue\"] = \"Hue\";\n    IMChannel[\"K\"] = \"K\";\n    IMChannel[\"L\"] = \"L\";\n    IMChannel[\"Lightness\"] = \"Lightness\";\n    IMChannel[\"Luminance\"] = \"Luminance\";\n    IMChannel[\"M\"] = \"M\";\n    IMChannel[\"Magenta\"] = \"Magenta\";\n    IMChannel[\"Meta\"] = \"Meta\";\n    IMChannel[\"R\"] = \"R\";\n    IMChannel[\"Red\"] = \"Red\";\n    IMChannel[\"S\"] = \"S\";\n    IMChannel[\"Saturation\"] = \"Saturation\";\n    IMChannel[\"Y\"] = \"Y\";\n    IMChannel[\"Yellow\"] = \"Yellow\";\n    IMChannel[\"0_\"] = \"0\";\n    IMChannel[\"1_\"] = \"1\";\n    IMChannel[\"2_\"] = \"2\";\n    IMChannel[\"3_\"] = \"3\";\n    IMChannel[\"4_\"] = \"4\";\n    IMChannel[\"5_\"] = \"5\";\n    IMChannel[\"6_\"] = \"6\";\n    IMChannel[\"7_\"] = \"7\";\n    IMChannel[\"8_\"] = \"8\";\n    IMChannel[\"9_\"] = \"9\";\n    IMChannel[\"10_\"] = \"10\";\n    IMChannel[\"11_\"] = \"11\";\n    IMChannel[\"12_\"] = \"12\";\n    IMChannel[\"13_\"] = \"13\";\n    IMChannel[\"14_\"] = \"14\";\n    IMChannel[\"15_\"] = \"15\";\n    IMChannel[\"16_\"] = \"16\";\n    IMChannel[\"17_\"] = \"17\";\n    IMChannel[\"18_\"] = \"18\";\n    IMChannel[\"19_\"] = \"19\";\n    IMChannel[\"20_\"] = \"20\";\n    IMChannel[\"21_\"] = \"21\";\n    IMChannel[\"22_\"] = \"22\";\n    IMChannel[\"23_\"] = \"23\";\n    IMChannel[\"24_\"] = \"24\";\n    IMChannel[\"25_\"] = \"25\";\n    IMChannel[\"26_\"] = \"26\";\n    IMChannel[\"27_\"] = \"27\";\n    IMChannel[\"28_\"] = \"28\";\n    IMChannel[\"29_\"] = \"29\";\n    IMChannel[\"30_\"] = \"30\";\n    IMChannel[\"31_\"] = \"31\";\n})(IMChannel || (IMChannel = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMClass;\n(function (IMClass) {\n    IMClass[\"DirectClass\"] = \"DirectClass\";\n    IMClass[\"PseudoClass\"] = \"PseudoClass\";\n})(IMClass || (IMClass = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMClipPath;\n(function (IMClipPath) {\n    IMClipPath[\"ObjectBoundingBox\"] = \"ObjectBoundingBox\";\n    IMClipPath[\"UserSpace\"] = \"UserSpace\";\n    IMClipPath[\"UserSpaceOnUse\"] = \"UserSpaceOnUse\";\n})(IMClipPath || (IMClipPath = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMColorspace;\n(function (IMColorspace) {\n    IMColorspace[\"CIELab\"] = \"CIELab\";\n    IMColorspace[\"CMY\"] = \"CMY\";\n    IMColorspace[\"CMYK\"] = \"CMYK\";\n    IMColorspace[\"Gray\"] = \"Gray\";\n    IMColorspace[\"HCL\"] = \"HCL\";\n    IMColorspace[\"HCLp\"] = \"HCLp\";\n    IMColorspace[\"HSB\"] = \"HSB\";\n    IMColorspace[\"HSI\"] = \"HSI\";\n    IMColorspace[\"HSL\"] = \"HSL\";\n    IMColorspace[\"HSV\"] = \"HSV\";\n    IMColorspace[\"HWB\"] = \"HWB\";\n    IMColorspace[\"Lab\"] = \"Lab\";\n    IMColorspace[\"LCH\"] = \"LCH\";\n    IMColorspace[\"LCHab\"] = \"LCHab\";\n    IMColorspace[\"LCHuv\"] = \"LCHuv\";\n    IMColorspace[\"LinearGray\"] = \"LinearGray\";\n    IMColorspace[\"LMS\"] = \"LMS\";\n    IMColorspace[\"Log\"] = \"Log\";\n    IMColorspace[\"Luv\"] = \"Luv\";\n    IMColorspace[\"OHTA\"] = \"OHTA\";\n    IMColorspace[\"Rec601YCbCr\"] = \"Rec601YCbCr\";\n    IMColorspace[\"Rec709YCbCr\"] = \"Rec709YCbCr\";\n    IMColorspace[\"RGB\"] = \"RGB\";\n    IMColorspace[\"scRGB\"] = \"scRGB\";\n    IMColorspace[\"sRGB\"] = \"sRGB\";\n    IMColorspace[\"Transparent\"] = \"Transparent\";\n    IMColorspace[\"xyY\"] = \"xyY\";\n    IMColorspace[\"XYZ\"] = \"XYZ\";\n    IMColorspace[\"YCbCr\"] = \"YCbCr\";\n    IMColorspace[\"YDbDr\"] = \"YDbDr\";\n    IMColorspace[\"YCC\"] = \"YCC\";\n    IMColorspace[\"YIQ\"] = \"YIQ\";\n    IMColorspace[\"YPbPr\"] = \"YPbPr\";\n    IMColorspace[\"YUV\"] = \"YUV\";\n})(IMColorspace || (IMColorspace = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMCommand;\n(function (IMCommand) {\n    IMCommand[\"-alpha\"] = \"-alpha\";\n    IMCommand[\"+background\"] = \"+background\";\n    IMCommand[\"-background\"] = \"-background\";\n    IMCommand[\"+format\"] = \"+format\";\n    IMCommand[\"-format\"] = \"-format\";\n    IMCommand[\"-quiet\"] = \"-quiet\";\n    IMCommand[\"+quiet\"] = \"+quiet\";\n    IMCommand[\"-regard-warnings\"] = \"-regard-warnings\";\n    IMCommand[\"+regard-warnings\"] = \"+regard-warnings\";\n    IMCommand[\"+repage\"] = \"+repage\";\n    IMCommand[\"-repage\"] = \"-repage\";\n    IMCommand[\"+size\"] = \"+size\";\n    IMCommand[\"-size\"] = \"-size\";\n    IMCommand[\"+virtual-pixel\"] = \"+virtual-pixel\";\n    IMCommand[\"-virtual-pixel\"] = \"-virtual-pixel\";\n    IMCommand[\"-blur\"] = \"-blur\";\n    IMCommand[\"-resize\"] = \"-resize\";\n    IMCommand[\"-adaptive-blur\"] = \"-adaptive-blur\";\n    IMCommand[\"-adaptive-resize\"] = \"-adaptive-resize\";\n    IMCommand[\"-adaptive-sharpen\"] = \"-adaptive-sharpen\";\n    IMCommand[\"-adjoin\"] = \"-adjoin\";\n    IMCommand[\"+adjoin\"] = \"+adjoin\";\n    IMCommand[\"+mattecolor\"] = \"+mattecolor\";\n    IMCommand[\"-mattecolor\"] = \"-mattecolor\";\n    IMCommand[\"-annotate\"] = \"-annotate\";\n    IMCommand[\"-antialias\"] = \"-antialias\";\n    IMCommand[\"+antialias\"] = \"+antialias\";\n    IMCommand[\"-append\"] = \"-append\";\n    IMCommand[\"+append\"] = \"+append\";\n    IMCommand[\"+attenuate\"] = \"+attenuate\";\n    IMCommand[\"-attenuate\"] = \"-attenuate\";\n    IMCommand[\"+authenticate\"] = \"+authenticate\";\n    IMCommand[\"-authenticate\"] = \"-authenticate\";\n    IMCommand[\"-auto-gamma\"] = \"-auto-gamma\";\n    IMCommand[\"-auto-level\"] = \"-auto-level\";\n    IMCommand[\"-auto-orient\"] = \"-auto-orient\";\n    IMCommand[\"-auto-threshold\"] = \"-auto-threshold\";\n    IMCommand[\"+backdrop\"] = \"+backdrop\";\n    IMCommand[\"-backdrop\"] = \"-backdrop\";\n    IMCommand[\"-bench\"] = \"-bench\";\n    IMCommand[\"+bias\"] = \"+bias\";\n    IMCommand[\"-bias\"] = \"-bias\";\n    IMCommand[\"-black-point-compensation\"] = \"-black-point-compensation\";\n    IMCommand[\"+black-point-compensation\"] = \"+black-point-compensation\";\n    IMCommand[\"-black-threshold\"] = \"-black-threshold\";\n    IMCommand[\"+blend\"] = \"+blend\";\n    IMCommand[\"-blend\"] = \"-blend\";\n    IMCommand[\"+blue-primary\"] = \"+blue-primary\";\n    IMCommand[\"-blue-primary\"] = \"-blue-primary\";\n    IMCommand[\"-blue-shift\"] = \"-blue-shift\";\n    IMCommand[\"+blue-shift\"] = \"+blue-shift\";\n    IMCommand[\"-border\"] = \"-border\";\n    IMCommand[\"+bordercolor\"] = \"+bordercolor\";\n    IMCommand[\"-bordercolor\"] = \"-bordercolor\";\n    IMCommand[\"+borderwidth\"] = \"+borderwidth\";\n    IMCommand[\"-borderwidth\"] = \"-borderwidth\";\n    IMCommand[\"-brightness-contrast\"] = \"-brightness-contrast\";\n    IMCommand[\"+cache\"] = \"+cache\";\n    IMCommand[\"-cache\"] = \"-cache\";\n    IMCommand[\"+caption\"] = \"+caption\";\n    IMCommand[\"-caption\"] = \"-caption\";\n    IMCommand[\"-cdl\"] = \"-cdl\";\n    IMCommand[\"+channel\"] = \"+channel\";\n    IMCommand[\"-channel\"] = \"-channel\";\n    IMCommand[\"-channel-fx\"] = \"-channel-fx\";\n    IMCommand[\"-charcoal\"] = \"-charcoal\";\n    IMCommand[\"-chop\"] = \"-chop\";\n    IMCommand[\"-clamp\"] = \"-clamp\";\n    IMCommand[\"-clip\"] = \"-clip\";\n    IMCommand[\"+clip\"] = \"+clip\";\n    IMCommand[\"+clip-mask\"] = \"+clip-mask\";\n    IMCommand[\"-clip-mask\"] = \"-clip-mask\";\n    IMCommand[\"-clip-path\"] = \"-clip-path\";\n    IMCommand[\"+clip-path\"] = \"+clip-path\";\n    IMCommand[\"+clone\"] = \"+clone\";\n    IMCommand[\"-clone\"] = \"-clone\";\n    IMCommand[\"-clut\"] = \"-clut\";\n    IMCommand[\"-coalesce\"] = \"-coalesce\";\n    IMCommand[\"-colorize\"] = \"-colorize\";\n    IMCommand[\"+colormap\"] = \"+colormap\";\n    IMCommand[\"-colormap\"] = \"-colormap\";\n    IMCommand[\"-color-matrix\"] = \"-color-matrix\";\n    IMCommand[\"-colors\"] = \"-colors\";\n    IMCommand[\"+colorspace\"] = \"+colorspace\";\n    IMCommand[\"-colorspace\"] = \"-colorspace\";\n    IMCommand[\"-combine\"] = \"-combine\";\n    IMCommand[\"+combine\"] = \"+combine\";\n    IMCommand[\"+comment\"] = \"+comment\";\n    IMCommand[\"-comment\"] = \"-comment\";\n    IMCommand[\"-compare\"] = \"-compare\";\n    IMCommand[\"-complex\"] = \"-complex\";\n    IMCommand[\"+compose\"] = \"+compose\";\n    IMCommand[\"-compose\"] = \"-compose\";\n    IMCommand[\"-composite\"] = \"-composite\";\n    IMCommand[\"+compress\"] = \"+compress\";\n    IMCommand[\"-compress\"] = \"-compress\";\n    IMCommand[\"-concurrent\"] = \"-concurrent\";\n    IMCommand[\"-connected-components\"] = \"-connected-components\";\n    IMCommand[\"-contrast-stretch\"] = \"-contrast-stretch\";\n    IMCommand[\"-convolve\"] = \"-convolve\";\n    IMCommand[\"-copy\"] = \"-copy\";\n    IMCommand[\"-crop\"] = \"-crop\";\n    IMCommand[\"-cycle\"] = \"-cycle\";\n    IMCommand[\"+debug\"] = \"+debug\";\n    IMCommand[\"-debug\"] = \"-debug\";\n    IMCommand[\"-decipher\"] = \"-decipher\";\n    IMCommand[\"-define\"] = \"-define\";\n    IMCommand[\"+define\"] = \"+define\";\n    IMCommand[\"+delay\"] = \"+delay\";\n    IMCommand[\"-delay\"] = \"-delay\";\n    IMCommand[\"+delete\"] = \"+delete\";\n    IMCommand[\"-delete\"] = \"-delete\";\n    IMCommand[\"+density\"] = \"+density\";\n    IMCommand[\"-density\"] = \"-density\";\n    IMCommand[\"+depth\"] = \"+depth\";\n    IMCommand[\"-depth\"] = \"-depth\";\n    IMCommand[\"+descend\"] = \"+descend\";\n    IMCommand[\"-descend\"] = \"-descend\";\n    IMCommand[\"+deskew\"] = \"+deskew\";\n    IMCommand[\"-deskew\"] = \"-deskew\";\n    IMCommand[\"-despeckle\"] = \"-despeckle\";\n    IMCommand[\"+direction\"] = \"+direction\";\n    IMCommand[\"-direction\"] = \"-direction\";\n    IMCommand[\"+displace\"] = \"+displace\";\n    IMCommand[\"-displace\"] = \"-displace\";\n    IMCommand[\"-display\"] = \"-display\";\n    IMCommand[\"+display\"] = \"+display\";\n    IMCommand[\"+dispose\"] = \"+dispose\";\n    IMCommand[\"-dispose\"] = \"-dispose\";\n    IMCommand[\"+dissimilarity-threshold\"] = \"+dissimilarity-threshold\";\n    IMCommand[\"-dissimilarity-threshold\"] = \"-dissimilarity-threshold\";\n    IMCommand[\"+dissolve\"] = \"+dissolve\";\n    IMCommand[\"-dissolve\"] = \"-dissolve\";\n    IMCommand[\"-distort\"] = \"-distort\";\n    IMCommand[\"+distort\"] = \"+distort\";\n    IMCommand[\"+dither\"] = \"+dither\";\n    IMCommand[\"-dither\"] = \"-dither\";\n    IMCommand[\"-draw\"] = \"-draw\";\n    IMCommand[\"+duplicate\"] = \"+duplicate\";\n    IMCommand[\"-duplicate\"] = \"-duplicate\";\n    IMCommand[\"-duration\"] = \"-duration\";\n    IMCommand[\"+duration\"] = \"+duration\";\n    IMCommand[\"-edge\"] = \"-edge\";\n    IMCommand[\"-emboss\"] = \"-emboss\";\n    IMCommand[\"-encipher\"] = \"-encipher\";\n    IMCommand[\"+encoding\"] = \"+encoding\";\n    IMCommand[\"-encoding\"] = \"-encoding\";\n    IMCommand[\"+endian\"] = \"+endian\";\n    IMCommand[\"-endian\"] = \"-endian\";\n    IMCommand[\"-enhance\"] = \"-enhance\";\n    IMCommand[\"-equalize\"] = \"-equalize\";\n    IMCommand[\"-evaluate\"] = \"-evaluate\";\n    IMCommand[\"-evaluate-sequence\"] = \"-evaluate-sequence\";\n    IMCommand[\"-exit\"] = \"-exit\";\n    IMCommand[\"-extent\"] = \"-extent\";\n    IMCommand[\"+extract\"] = \"+extract\";\n    IMCommand[\"-extract\"] = \"-extract\";\n    IMCommand[\"-family\"] = \"-family\";\n    IMCommand[\"+features\"] = \"+features\";\n    IMCommand[\"-features\"] = \"-features\";\n    IMCommand[\"-fft\"] = \"-fft\";\n    IMCommand[\"+fft\"] = \"+fft\";\n    IMCommand[\"+fill\"] = \"+fill\";\n    IMCommand[\"-fill\"] = \"-fill\";\n    IMCommand[\"+filter\"] = \"+filter\";\n    IMCommand[\"-filter\"] = \"-filter\";\n    IMCommand[\"-flatten\"] = \"-flatten\";\n    IMCommand[\"-flip\"] = \"-flip\";\n    IMCommand[\"-floodfill\"] = \"-floodfill\";\n    IMCommand[\"+floodfill\"] = \"+floodfill\";\n    IMCommand[\"-flop\"] = \"-flop\";\n    IMCommand[\"+font\"] = \"+font\";\n    IMCommand[\"-font\"] = \"-font\";\n    IMCommand[\"+foreground\"] = \"+foreground\";\n    IMCommand[\"-foreground\"] = \"-foreground\";\n    IMCommand[\"-frame\"] = \"-frame\";\n    IMCommand[\"-function\"] = \"-function\";\n    IMCommand[\"+fuzz\"] = \"+fuzz\";\n    IMCommand[\"-fuzz\"] = \"-fuzz\";\n    IMCommand[\"-fx\"] = \"-fx\";\n    IMCommand[\"-gamma\"] = \"-gamma\";\n    IMCommand[\"+gamma\"] = \"+gamma\";\n    IMCommand[\"-gaussian-blur\"] = \"-gaussian-blur\";\n    IMCommand[\"+geometry\"] = \"+geometry\";\n    IMCommand[\"-geometry\"] = \"-geometry\";\n    IMCommand[\"+gravity\"] = \"+gravity\";\n    IMCommand[\"-gravity\"] = \"-gravity\";\n    IMCommand[\"-grayscale\"] = \"-grayscale\";\n    IMCommand[\"+green-primary\"] = \"+green-primary\";\n    IMCommand[\"-green-primary\"] = \"-green-primary\";\n    IMCommand[\"-hald-clut\"] = \"-hald-clut\";\n    IMCommand[\"+highlight-color\"] = \"+highlight-color\";\n    IMCommand[\"-highlight-color\"] = \"-highlight-color\";\n    IMCommand[\"+iconGeometry\"] = \"+iconGeometry\";\n    IMCommand[\"-iconGeometry\"] = \"-iconGeometry\";\n    IMCommand[\"-iconic\"] = \"-iconic\";\n    IMCommand[\"+iconic\"] = \"+iconic\";\n    IMCommand[\"-identify\"] = \"-identify\";\n    IMCommand[\"-ift\"] = \"-ift\";\n    IMCommand[\"+ift\"] = \"+ift\";\n    IMCommand[\"-immutable\"] = \"-immutable\";\n    IMCommand[\"+immutable\"] = \"+immutable\";\n    IMCommand[\"-implode\"] = \"-implode\";\n    IMCommand[\"+insert\"] = \"+insert\";\n    IMCommand[\"-insert\"] = \"-insert\";\n    IMCommand[\"+intensity\"] = \"+intensity\";\n    IMCommand[\"-intensity\"] = \"-intensity\";\n    IMCommand[\"+intent\"] = \"+intent\";\n    IMCommand[\"-intent\"] = \"-intent\";\n    IMCommand[\"+interlace\"] = \"+interlace\";\n    IMCommand[\"-interlace\"] = \"-interlace\";\n    IMCommand[\"+interline-spacing\"] = \"+interline-spacing\";\n    IMCommand[\"-interline-spacing\"] = \"-interline-spacing\";\n    IMCommand[\"+interpolate\"] = \"+interpolate\";\n    IMCommand[\"-interpolate\"] = \"-interpolate\";\n    IMCommand[\"-interpolative-resize\"] = \"-interpolative-resize\";\n    IMCommand[\"+interword-spacing\"] = \"+interword-spacing\";\n    IMCommand[\"-interword-spacing\"] = \"-interword-spacing\";\n    IMCommand[\"+kerning\"] = \"+kerning\";\n    IMCommand[\"-kerning\"] = \"-kerning\";\n    IMCommand[\"-kuwahara\"] = \"-kuwahara\";\n    IMCommand[\"+label\"] = \"+label\";\n    IMCommand[\"-label\"] = \"-label\";\n    IMCommand[\"-lat\"] = \"-lat\";\n    IMCommand[\"-layers\"] = \"-layers\";\n    IMCommand[\"-level\"] = \"-level\";\n    IMCommand[\"+level\"] = \"+level\";\n    IMCommand[\"-level-colors\"] = \"-level-colors\";\n    IMCommand[\"+level-colors\"] = \"+level-colors\";\n    IMCommand[\"-limit\"] = \"-limit\";\n    IMCommand[\"-linear-stretch\"] = \"-linear-stretch\";\n    IMCommand[\"-liquid-rescale\"] = \"-liquid-rescale\";\n    IMCommand[\"-list\"] = \"-list\";\n    IMCommand[\"-local-contrast\"] = \"-local-contrast\";\n    IMCommand[\"+log\"] = \"+log\";\n    IMCommand[\"-log\"] = \"-log\";\n    IMCommand[\"+loop\"] = \"+loop\";\n    IMCommand[\"-loop\"] = \"-loop\";\n    IMCommand[\"+lowlight-color\"] = \"+lowlight-color\";\n    IMCommand[\"-lowlight-color\"] = \"-lowlight-color\";\n    IMCommand[\"-magnify\"] = \"-magnify\";\n    IMCommand[\"+mask\"] = \"+mask\";\n    IMCommand[\"-mask\"] = \"-mask\";\n    IMCommand[\"+metric\"] = \"+metric\";\n    IMCommand[\"-metric\"] = \"-metric\";\n    IMCommand[\"+mode\"] = \"+mode\";\n    IMCommand[\"-modulate\"] = \"-modulate\";\n    IMCommand[\"-moments\"] = \"-moments\";\n    IMCommand[\"+moments\"] = \"+moments\";\n    IMCommand[\"-monitor\"] = \"-monitor\";\n    IMCommand[\"+monitor\"] = \"+monitor\";\n    IMCommand[\"+monochrome\"] = \"+monochrome\";\n    IMCommand[\"-monochrome\"] = \"-monochrome\";\n    IMCommand[\"-morph\"] = \"-morph\";\n    IMCommand[\"-morphology\"] = \"-morphology\";\n    IMCommand[\"-mosaic\"] = \"-mosaic\";\n    IMCommand[\"-motion-blur\"] = \"-motion-blur\";\n    IMCommand[\"+name\"] = \"+name\";\n    IMCommand[\"-name\"] = \"-name\";\n    IMCommand[\"+negate\"] = \"+negate\";\n    IMCommand[\"-negate\"] = \"-negate\";\n    IMCommand[\"-noise\"] = \"-noise\";\n    IMCommand[\"+noise\"] = \"+noise\";\n    IMCommand[\"-noop\"] = \"-noop\";\n    IMCommand[\"-normalize\"] = \"-normalize\";\n    IMCommand[\"-opaque\"] = \"-opaque\";\n    IMCommand[\"+opaque\"] = \"+opaque\";\n    IMCommand[\"-ordered-dither\"] = \"-ordered-dither\";\n    IMCommand[\"+orient\"] = \"+orient\";\n    IMCommand[\"-orient\"] = \"-orient\";\n    IMCommand[\"+page\"] = \"+page\";\n    IMCommand[\"-page\"] = \"-page\";\n    IMCommand[\"-paint\"] = \"-paint\";\n    IMCommand[\"+path\"] = \"+path\";\n    IMCommand[\"-path\"] = \"-path\";\n    IMCommand[\"+pause\"] = \"+pause\";\n    IMCommand[\"-pause\"] = \"-pause\";\n    IMCommand[\"-ping\"] = \"-ping\";\n    IMCommand[\"+ping\"] = \"+ping\";\n    IMCommand[\"+pointsize\"] = \"+pointsize\";\n    IMCommand[\"-pointsize\"] = \"-pointsize\";\n    IMCommand[\"+polaroid\"] = \"+polaroid\";\n    IMCommand[\"-polaroid\"] = \"-polaroid\";\n    IMCommand[\"-poly\"] = \"-poly\";\n    IMCommand[\"-posterize\"] = \"-posterize\";\n    IMCommand[\"+precision\"] = \"+precision\";\n    IMCommand[\"-precision\"] = \"-precision\";\n    IMCommand[\"-preview\"] = \"-preview\";\n    IMCommand[\"-print\"] = \"-print\";\n    IMCommand[\"-process\"] = \"-process\";\n    IMCommand[\"+profile\"] = \"+profile\";\n    IMCommand[\"-profile\"] = \"-profile\";\n    IMCommand[\"+quality\"] = \"+quality\";\n    IMCommand[\"-quality\"] = \"-quality\";\n    IMCommand[\"+quantize\"] = \"+quantize\";\n    IMCommand[\"-quantize\"] = \"-quantize\";\n    IMCommand[\"-raise\"] = \"-raise\";\n    IMCommand[\"+raise\"] = \"+raise\";\n    IMCommand[\"-random-threshold\"] = \"-random-threshold\";\n    IMCommand[\"-range-threshold\"] = \"-range-threshold\";\n    IMCommand[\"-read\"] = \"-read\";\n    IMCommand[\"+read-mask\"] = \"+read-mask\";\n    IMCommand[\"-read-mask\"] = \"-read-mask\";\n    IMCommand[\"+red-primary\"] = \"+red-primary\";\n    IMCommand[\"-red-primary\"] = \"-red-primary\";\n    IMCommand[\"+region\"] = \"+region\";\n    IMCommand[\"-region\"] = \"-region\";\n    IMCommand[\"+remap\"] = \"+remap\";\n    IMCommand[\"-remap\"] = \"-remap\";\n    IMCommand[\"+remote\"] = \"+remote\";\n    IMCommand[\"-remote\"] = \"-remote\";\n    IMCommand[\"-render\"] = \"-render\";\n    IMCommand[\"+render\"] = \"+render\";\n    IMCommand[\"-resample\"] = \"-resample\";\n    IMCommand[\"-respect-parenthesis\"] = \"-respect-parenthesis\";\n    IMCommand[\"+respect-parenthesis\"] = \"+respect-parenthesis\";\n    IMCommand[\"-reverse\"] = \"-reverse\";\n    IMCommand[\"-roll\"] = \"-roll\";\n    IMCommand[\"-rotate\"] = \"-rotate\";\n    IMCommand[\"-rotational-blur\"] = \"-rotational-blur\";\n    IMCommand[\"-sample\"] = \"-sample\";\n    IMCommand[\"+sampling-factor\"] = \"+sampling-factor\";\n    IMCommand[\"-sampling-factor\"] = \"-sampling-factor\";\n    IMCommand[\"-scale\"] = \"-scale\";\n    IMCommand[\"+scene\"] = \"+scene\";\n    IMCommand[\"-scene\"] = \"-scene\";\n    IMCommand[\"+scenes\"] = \"+scenes\";\n    IMCommand[\"-scenes\"] = \"-scenes\";\n    IMCommand[\"+screen\"] = \"+screen\";\n    IMCommand[\"-screen\"] = \"-screen\";\n    IMCommand[\"-script\"] = \"-script\";\n    IMCommand[\"+seed\"] = \"+seed\";\n    IMCommand[\"-seed\"] = \"-seed\";\n    IMCommand[\"-segment\"] = \"-segment\";\n    IMCommand[\"-selective-blur\"] = \"-selective-blur\";\n    IMCommand[\"-separate\"] = \"-separate\";\n    IMCommand[\"-sepia-tone\"] = \"-sepia-tone\";\n    IMCommand[\"+set\"] = \"+set\";\n    IMCommand[\"-set\"] = \"-set\";\n    IMCommand[\"-shade\"] = \"-shade\";\n    IMCommand[\"-shadow\"] = \"-shadow\";\n    IMCommand[\"+shared-memory\"] = \"+shared-memory\";\n    IMCommand[\"-shared-memory\"] = \"-shared-memory\";\n    IMCommand[\"-sharpen\"] = \"-sharpen\";\n    IMCommand[\"-shave\"] = \"-shave\";\n    IMCommand[\"-shear\"] = \"-shear\";\n    IMCommand[\"-sigmoidal-contrast\"] = \"-sigmoidal-contrast\";\n    IMCommand[\"+sigmoidal-contrast\"] = \"+sigmoidal-contrast\";\n    IMCommand[\"+silent\"] = \"+silent\";\n    IMCommand[\"-silent\"] = \"-silent\";\n    IMCommand[\"+similarity-threshold\"] = \"+similarity-threshold\";\n    IMCommand[\"-similarity-threshold\"] = \"-similarity-threshold\";\n    IMCommand[\"-sketch\"] = \"-sketch\";\n    IMCommand[\"-smush\"] = \"-smush\";\n    IMCommand[\"+smush\"] = \"+smush\";\n    IMCommand[\"+snaps\"] = \"+snaps\";\n    IMCommand[\"-snaps\"] = \"-snaps\";\n    IMCommand[\"-solarize\"] = \"-solarize\";\n    IMCommand[\"-sparse-color\"] = \"-sparse-color\";\n    IMCommand[\"-splice\"] = \"-splice\";\n    IMCommand[\"-spread\"] = \"-spread\";\n    IMCommand[\"-statistic\"] = \"-statistic\";\n    IMCommand[\"+stegano\"] = \"+stegano\";\n    IMCommand[\"-stegano\"] = \"-stegano\";\n    IMCommand[\"-stereo\"] = \"-stereo\";\n    IMCommand[\"-stretch\"] = \"-stretch\";\n    IMCommand[\"-strip\"] = \"-strip\";\n    IMCommand[\"+stroke\"] = \"+stroke\";\n    IMCommand[\"-stroke\"] = \"-stroke\";\n    IMCommand[\"-strokewidth\"] = \"-strokewidth\";\n    IMCommand[\"+strokewidth\"] = \"+strokewidth\";\n    IMCommand[\"+style\"] = \"+style\";\n    IMCommand[\"-style\"] = \"-style\";\n    IMCommand[\"-subimage\"] = \"-subimage\";\n    IMCommand[\"-subimage-search\"] = \"-subimage-search\";\n    IMCommand[\"+subimage-search\"] = \"+subimage-search\";\n    IMCommand[\"+swap\"] = \"+swap\";\n    IMCommand[\"-swap\"] = \"-swap\";\n    IMCommand[\"-swirl\"] = \"-swirl\";\n    IMCommand[\"-synchronize\"] = \"-synchronize\";\n    IMCommand[\"+synchronize\"] = \"+synchronize\";\n    IMCommand[\"-taint\"] = \"-taint\";\n    IMCommand[\"+taint\"] = \"+taint\";\n    IMCommand[\"+text-font\"] = \"+text-font\";\n    IMCommand[\"-text-font\"] = \"-text-font\";\n    IMCommand[\"+texture\"] = \"+texture\";\n    IMCommand[\"-texture\"] = \"-texture\";\n    IMCommand[\"+threshold\"] = \"+threshold\";\n    IMCommand[\"-threshold\"] = \"-threshold\";\n    IMCommand[\"-thumbnail\"] = \"-thumbnail\";\n    IMCommand[\"+tile\"] = \"+tile\";\n    IMCommand[\"-tile\"] = \"-tile\";\n    IMCommand[\"+tile-offset\"] = \"+tile-offset\";\n    IMCommand[\"-tile-offset\"] = \"-tile-offset\";\n    IMCommand[\"-tint\"] = \"-tint\";\n    IMCommand[\"+tint\"] = \"+tint\";\n    IMCommand[\"+title\"] = \"+title\";\n    IMCommand[\"-title\"] = \"-title\";\n    IMCommand[\"-transparent\"] = \"-transparent\";\n    IMCommand[\"+transparent\"] = \"+transparent\";\n    IMCommand[\"+transparent-color\"] = \"+transparent-color\";\n    IMCommand[\"-transparent-color\"] = \"-transparent-color\";\n    IMCommand[\"-transpose\"] = \"-transpose\";\n    IMCommand[\"-transverse\"] = \"-transverse\";\n    IMCommand[\"-treedepth\"] = \"-treedepth\";\n    IMCommand[\"-trim\"] = \"-trim\";\n    IMCommand[\"+type\"] = \"+type\";\n    IMCommand[\"-type\"] = \"-type\";\n    IMCommand[\"+undercolor\"] = \"+undercolor\";\n    IMCommand[\"-undercolor\"] = \"-undercolor\";\n    IMCommand[\"-unique\"] = \"-unique\";\n    IMCommand[\"+unique\"] = \"+unique\";\n    IMCommand[\"-unique-colors\"] = \"-unique-colors\";\n    IMCommand[\"+units\"] = \"+units\";\n    IMCommand[\"-units\"] = \"-units\";\n    IMCommand[\"-unsharp\"] = \"-unsharp\";\n    IMCommand[\"+update\"] = \"+update\";\n    IMCommand[\"-update\"] = \"-update\";\n    IMCommand[\"+use-pixmap\"] = \"+use-pixmap\";\n    IMCommand[\"-use-pixmap\"] = \"-use-pixmap\";\n    IMCommand[\"-verbose\"] = \"-verbose\";\n    IMCommand[\"+verbose\"] = \"+verbose\";\n    IMCommand[\"-version\"] = \"-version\";\n    IMCommand[\"+view\"] = \"+view\";\n    IMCommand[\"-view\"] = \"-view\";\n    IMCommand[\"-vignette\"] = \"-vignette\";\n    IMCommand[\"+visual\"] = \"+visual\";\n    IMCommand[\"-visual\"] = \"-visual\";\n    IMCommand[\"+watermark\"] = \"+watermark\";\n    IMCommand[\"-watermark\"] = \"-watermark\";\n    IMCommand[\"-wave\"] = \"-wave\";\n    IMCommand[\"-wavelet-denoise\"] = \"-wavelet-denoise\";\n    IMCommand[\"-weight\"] = \"-weight\";\n    IMCommand[\"+white-point\"] = \"+white-point\";\n    IMCommand[\"-white-point\"] = \"-white-point\";\n    IMCommand[\"-white-threshold\"] = \"-white-threshold\";\n    IMCommand[\"+window\"] = \"+window\";\n    IMCommand[\"-window\"] = \"-window\";\n    IMCommand[\"+window-group\"] = \"+window-group\";\n    IMCommand[\"-window-group\"] = \"-window-group\";\n    IMCommand[\"-write\"] = \"-write\";\n    IMCommand[\"+write\"] = \"+write\";\n    IMCommand[\"+write-mask\"] = \"+write-mask\";\n    IMCommand[\"-write-mask\"] = \"-write-mask\";\n})(IMCommand || (IMCommand = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMCompliance;\n(function (IMCompliance) {\n    IMCompliance[\"CSS\"] = \"CSS\";\n    IMCompliance[\"MVG\"] = \"MVG\";\n    IMCompliance[\"No\"] = \"No\";\n    IMCompliance[\"SVG\"] = \"SVG\";\n    IMCompliance[\"X11\"] = \"X11\";\n    IMCompliance[\"XPM\"] = \"XPM\";\n})(IMCompliance || (IMCompliance = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMComplex;\n(function (IMComplex) {\n    IMComplex[\"Add\"] = \"Add\";\n    IMComplex[\"Conjugate\"] = \"Conjugate\";\n    IMComplex[\"Divide\"] = \"Divide\";\n    IMComplex[\"MagnitudePhase\"] = \"MagnitudePhase\";\n    IMComplex[\"Multiply\"] = \"Multiply\";\n    IMComplex[\"RealImaginary\"] = \"RealImaginary\";\n    IMComplex[\"Subtract\"] = \"Subtract\";\n})(IMComplex || (IMComplex = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMCompose;\n(function (IMCompose) {\n    IMCompose[\"Atop\"] = \"Atop\";\n    IMCompose[\"Blend\"] = \"Blend\";\n    IMCompose[\"Blur\"] = \"Blur\";\n    IMCompose[\"Bumpmap\"] = \"Bumpmap\";\n    IMCompose[\"ChangeMask\"] = \"ChangeMask\";\n    IMCompose[\"Clear\"] = \"Clear\";\n    IMCompose[\"ColorBurn\"] = \"ColorBurn\";\n    IMCompose[\"ColorDodge\"] = \"ColorDodge\";\n    IMCompose[\"Colorize\"] = \"Colorize\";\n    IMCompose[\"CopyAlpha\"] = \"CopyAlpha\";\n    IMCompose[\"CopyBlack\"] = \"CopyBlack\";\n    IMCompose[\"CopyBlue\"] = \"CopyBlue\";\n    IMCompose[\"CopyCyan\"] = \"CopyCyan\";\n    IMCompose[\"CopyGreen\"] = \"CopyGreen\";\n    IMCompose[\"Copy\"] = \"Copy\";\n    IMCompose[\"CopyMagenta\"] = \"CopyMagenta\";\n    IMCompose[\"CopyRed\"] = \"CopyRed\";\n    IMCompose[\"CopyYellow\"] = \"CopyYellow\";\n    IMCompose[\"Darken\"] = \"Darken\";\n    IMCompose[\"DarkenIntensity\"] = \"DarkenIntensity\";\n    IMCompose[\"DivideDst\"] = \"DivideDst\";\n    IMCompose[\"DivideSrc\"] = \"DivideSrc\";\n    IMCompose[\"Dst\"] = \"Dst\";\n    IMCompose[\"Difference\"] = \"Difference\";\n    IMCompose[\"Displace\"] = \"Displace\";\n    IMCompose[\"Dissolve\"] = \"Dissolve\";\n    IMCompose[\"Distort\"] = \"Distort\";\n    IMCompose[\"DstAtop\"] = \"DstAtop\";\n    IMCompose[\"DstIn\"] = \"DstIn\";\n    IMCompose[\"DstOut\"] = \"DstOut\";\n    IMCompose[\"DstOver\"] = \"DstOver\";\n    IMCompose[\"Exclusion\"] = \"Exclusion\";\n    IMCompose[\"HardLight\"] = \"HardLight\";\n    IMCompose[\"HardMix\"] = \"HardMix\";\n    IMCompose[\"Hue\"] = \"Hue\";\n    IMCompose[\"In\"] = \"In\";\n    IMCompose[\"Intensity\"] = \"Intensity\";\n    IMCompose[\"Lighten\"] = \"Lighten\";\n    IMCompose[\"LightenIntensity\"] = \"LightenIntensity\";\n    IMCompose[\"LinearBurn\"] = \"LinearBurn\";\n    IMCompose[\"LinearDodge\"] = \"LinearDodge\";\n    IMCompose[\"LinearLight\"] = \"LinearLight\";\n    IMCompose[\"Luminize\"] = \"Luminize\";\n    IMCompose[\"Mathematics\"] = \"Mathematics\";\n    IMCompose[\"MinusDst\"] = \"MinusDst\";\n    IMCompose[\"MinusSrc\"] = \"MinusSrc\";\n    IMCompose[\"Modulate\"] = \"Modulate\";\n    IMCompose[\"ModulusAdd\"] = \"ModulusAdd\";\n    IMCompose[\"ModulusSubtract\"] = \"ModulusSubtract\";\n    IMCompose[\"Multiply\"] = \"Multiply\";\n    IMCompose[\"None\"] = \"None\";\n    IMCompose[\"Out\"] = \"Out\";\n    IMCompose[\"Overlay\"] = \"Overlay\";\n    IMCompose[\"Over\"] = \"Over\";\n    IMCompose[\"PegtopLight\"] = \"PegtopLight\";\n    IMCompose[\"PinLight\"] = \"PinLight\";\n    IMCompose[\"Plus\"] = \"Plus\";\n    IMCompose[\"Replace\"] = \"Replace\";\n    IMCompose[\"Saturate\"] = \"Saturate\";\n    IMCompose[\"Screen\"] = \"Screen\";\n    IMCompose[\"SoftLight\"] = \"SoftLight\";\n    IMCompose[\"Src\"] = \"Src\";\n    IMCompose[\"SrcAtop\"] = \"SrcAtop\";\n    IMCompose[\"SrcIn\"] = \"SrcIn\";\n    IMCompose[\"SrcOut\"] = \"SrcOut\";\n    IMCompose[\"SrcOver\"] = \"SrcOver\";\n    IMCompose[\"Stereo\"] = \"Stereo\";\n    IMCompose[\"VividLight\"] = \"VividLight\";\n    IMCompose[\"Xor\"] = \"Xor\";\n})(IMCompose || (IMCompose = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMCompress;\n(function (IMCompress) {\n    IMCompress[\"B44A\"] = \"B44A\";\n    IMCompress[\"B44\"] = \"B44\";\n    IMCompress[\"BZip\"] = \"BZip\";\n    IMCompress[\"DXT1\"] = \"DXT1\";\n    IMCompress[\"DXT3\"] = \"DXT3\";\n    IMCompress[\"DXT5\"] = \"DXT5\";\n    IMCompress[\"Fax\"] = \"Fax\";\n    IMCompress[\"Group4\"] = \"Group4\";\n    IMCompress[\"JBIG1\"] = \"JBIG1\";\n    IMCompress[\"JBIG2\"] = \"JBIG2\";\n    IMCompress[\"JPEG2000\"] = \"JPEG2000\";\n    IMCompress[\"JPEG\"] = \"JPEG\";\n    IMCompress[\"LosslessJPEG\"] = \"LosslessJPEG\";\n    IMCompress[\"Lossless\"] = \"Lossless\";\n    IMCompress[\"LZMA\"] = \"LZMA\";\n    IMCompress[\"LZW\"] = \"LZW\";\n    IMCompress[\"None\"] = \"None\";\n    IMCompress[\"Piz\"] = \"Piz\";\n    IMCompress[\"Pxr24\"] = \"Pxr24\";\n    IMCompress[\"RLE\"] = \"RLE\";\n    IMCompress[\"RunlengthEncoded\"] = \"RunlengthEncoded\";\n    IMCompress[\"WebP\"] = \"WebP\";\n    IMCompress[\"ZipS\"] = \"ZipS\";\n    IMCompress[\"Zip\"] = \"Zip\";\n    IMCompress[\"Zstd\"] = \"Zstd\";\n})(IMCompress || (IMCompress = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMDataType;\n(function (IMDataType) {\n    IMDataType[\"Byte\"] = \"Byte\";\n    IMDataType[\"Long\"] = \"Long\";\n    IMDataType[\"Short\"] = \"Short\";\n    IMDataType[\"String\"] = \"String\";\n})(IMDataType || (IMDataType = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMDebug;\n(function (IMDebug) {\n    IMDebug[\"All\"] = \"All\";\n    IMDebug[\"Accelerate\"] = \"Accelerate\";\n    IMDebug[\"Annotate\"] = \"Annotate\";\n    IMDebug[\"Blob\"] = \"Blob\";\n    IMDebug[\"Cache\"] = \"Cache\";\n    IMDebug[\"Coder\"] = \"Coder\";\n    IMDebug[\"Command\"] = \"Command\";\n    IMDebug[\"Configure\"] = \"Configure\";\n    IMDebug[\"Deprecate\"] = \"Deprecate\";\n    IMDebug[\"Draw\"] = \"Draw\";\n    IMDebug[\"Exception\"] = \"Exception\";\n    IMDebug[\"Locale\"] = \"Locale\";\n    IMDebug[\"Module\"] = \"Module\";\n    IMDebug[\"None\"] = \"None\";\n    IMDebug[\"Pixel\"] = \"Pixel\";\n    IMDebug[\"Policy\"] = \"Policy\";\n    IMDebug[\"Resource\"] = \"Resource\";\n    IMDebug[\"Trace\"] = \"Trace\";\n    IMDebug[\"Transform\"] = \"Transform\";\n    IMDebug[\"User\"] = \"User\";\n    IMDebug[\"Wand\"] = \"Wand\";\n    IMDebug[\"X11\"] = \"X11\";\n})(IMDebug || (IMDebug = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMDecoration;\n(function (IMDecoration) {\n    IMDecoration[\"LineThrough\"] = \"LineThrough\";\n    IMDecoration[\"None\"] = \"None\";\n    IMDecoration[\"Overline\"] = \"Overline\";\n    IMDecoration[\"Underline\"] = \"Underline\";\n})(IMDecoration || (IMDecoration = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMDirection;\n(function (IMDirection) {\n    IMDirection[\"right-to-left\"] = \"right-to-left\";\n    IMDirection[\"left-to-right\"] = \"left-to-right\";\n})(IMDirection || (IMDirection = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMDispose;\n(function (IMDispose) {\n    IMDispose[\"Undefined\"] = \"Undefined\";\n    IMDispose[\"Background\"] = \"Background\";\n    IMDispose[\"None\"] = \"None\";\n    IMDispose[\"Previous\"] = \"Previous\";\n    IMDispose[\"0_\"] = \"0\";\n    IMDispose[\"1_\"] = \"1\";\n    IMDispose[\"2_\"] = \"2\";\n    IMDispose[\"3_\"] = \"3\";\n})(IMDispose || (IMDispose = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMDistort;\n(function (IMDistort) {\n    IMDistort[\"Affine\"] = \"Affine\";\n    IMDistort[\"AffineProjection\"] = \"AffineProjection\";\n    IMDistort[\"ScaleRotateTranslate\"] = \"ScaleRotateTranslate\";\n    IMDistort[\"SRT\"] = \"SRT\";\n    IMDistort[\"Perspective\"] = \"Perspective\";\n    IMDistort[\"PerspectiveProjection\"] = \"PerspectiveProjection\";\n    IMDistort[\"BilinearForward\"] = \"BilinearForward\";\n    IMDistort[\"BilinearReverse\"] = \"BilinearReverse\";\n    IMDistort[\"Polynomial\"] = \"Polynomial\";\n    IMDistort[\"Arc\"] = \"Arc\";\n    IMDistort[\"Polar\"] = \"Polar\";\n    IMDistort[\"DePolar\"] = \"DePolar\";\n    IMDistort[\"Barrel\"] = \"Barrel\";\n    IMDistort[\"BarrelInverse\"] = \"BarrelInverse\";\n    IMDistort[\"Shepards\"] = \"Shepards\";\n    IMDistort[\"Resize\"] = \"Resize\";\n})(IMDistort || (IMDistort = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMDither;\n(function (IMDither) {\n    IMDither[\"None\"] = \"None\";\n    IMDither[\"FloydSteinberg\"] = \"FloydSteinberg\";\n    IMDither[\"Riemersma\"] = \"Riemersma\";\n})(IMDither || (IMDither = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMEndian;\n(function (IMEndian) {\n    IMEndian[\"LSB\"] = \"LSB\";\n    IMEndian[\"MSB\"] = \"MSB\";\n})(IMEndian || (IMEndian = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMEvaluate;\n(function (IMEvaluate) {\n    IMEvaluate[\"Abs\"] = \"Abs\";\n    IMEvaluate[\"Add\"] = \"Add\";\n    IMEvaluate[\"AddModulus\"] = \"AddModulus\";\n    IMEvaluate[\"And\"] = \"And\";\n    IMEvaluate[\"Cos\"] = \"Cos\";\n    IMEvaluate[\"Cosine\"] = \"Cosine\";\n    IMEvaluate[\"Divide\"] = \"Divide\";\n    IMEvaluate[\"Exp\"] = \"Exp\";\n    IMEvaluate[\"Exponential\"] = \"Exponential\";\n    IMEvaluate[\"GaussianNoise\"] = \"GaussianNoise\";\n    IMEvaluate[\"ImpulseNoise\"] = \"ImpulseNoise\";\n    IMEvaluate[\"LaplacianNoise\"] = \"LaplacianNoise\";\n    IMEvaluate[\"LeftShift\"] = \"LeftShift\";\n    IMEvaluate[\"Log\"] = \"Log\";\n    IMEvaluate[\"Max\"] = \"Max\";\n    IMEvaluate[\"Mean\"] = \"Mean\";\n    IMEvaluate[\"Median\"] = \"Median\";\n    IMEvaluate[\"Min\"] = \"Min\";\n    IMEvaluate[\"MultiplicativeNoise\"] = \"MultiplicativeNoise\";\n    IMEvaluate[\"Multiply\"] = \"Multiply\";\n    IMEvaluate[\"Or\"] = \"Or\";\n    IMEvaluate[\"PoissonNoise\"] = \"PoissonNoise\";\n    IMEvaluate[\"Pow\"] = \"Pow\";\n    IMEvaluate[\"RightShift\"] = \"RightShift\";\n    IMEvaluate[\"RMS\"] = \"RMS\";\n    IMEvaluate[\"RootMeanSquare\"] = \"RootMeanSquare\";\n    IMEvaluate[\"Set\"] = \"Set\";\n    IMEvaluate[\"Sin\"] = \"Sin\";\n    IMEvaluate[\"Sine\"] = \"Sine\";\n    IMEvaluate[\"Subtract\"] = \"Subtract\";\n    IMEvaluate[\"Sum\"] = \"Sum\";\n    IMEvaluate[\"Threshold\"] = \"Threshold\";\n    IMEvaluate[\"ThresholdBlack\"] = \"ThresholdBlack\";\n    IMEvaluate[\"ThresholdWhite\"] = \"ThresholdWhite\";\n    IMEvaluate[\"UniformNoise\"] = \"UniformNoise\";\n    IMEvaluate[\"Xor\"] = \"Xor\";\n})(IMEvaluate || (IMEvaluate = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMFillRule;\n(function (IMFillRule) {\n    IMFillRule[\"Evenodd\"] = \"Evenodd\";\n    IMFillRule[\"NonZero\"] = \"NonZero\";\n})(IMFillRule || (IMFillRule = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMFilter;\n(function (IMFilter) {\n    IMFilter[\"Bartlett\"] = \"Bartlett\";\n    IMFilter[\"Blackman\"] = \"Blackman\";\n    IMFilter[\"Bohman\"] = \"Bohman\";\n    IMFilter[\"Box\"] = \"Box\";\n    IMFilter[\"Catrom\"] = \"Catrom\";\n    IMFilter[\"Cosine\"] = \"Cosine\";\n    IMFilter[\"Cubic\"] = \"Cubic\";\n    IMFilter[\"Gaussian\"] = \"Gaussian\";\n    IMFilter[\"Hamming\"] = \"Hamming\";\n    IMFilter[\"Hann\"] = \"Hann\";\n    IMFilter[\"Hermite\"] = \"Hermite\";\n    IMFilter[\"Jinc\"] = \"Jinc\";\n    IMFilter[\"Kaiser\"] = \"Kaiser\";\n    IMFilter[\"Lagrange\"] = \"Lagrange\";\n    IMFilter[\"Lanczos\"] = \"Lanczos\";\n    IMFilter[\"Lanczos2\"] = \"Lanczos2\";\n    IMFilter[\"Lanczos2Sharp\"] = \"Lanczos2Sharp\";\n    IMFilter[\"LanczosRadius\"] = \"LanczosRadius\";\n    IMFilter[\"LanczosSharp\"] = \"LanczosSharp\";\n    IMFilter[\"Mitchell\"] = \"Mitchell\";\n    IMFilter[\"Parzen\"] = \"Parzen\";\n    IMFilter[\"Point\"] = \"Point\";\n    IMFilter[\"Quadratic\"] = \"Quadratic\";\n    IMFilter[\"Robidoux\"] = \"Robidoux\";\n    IMFilter[\"RobidouxSharp\"] = \"RobidouxSharp\";\n    IMFilter[\"Sinc\"] = \"Sinc\";\n    IMFilter[\"SincFast\"] = \"SincFast\";\n    IMFilter[\"Spline\"] = \"Spline\";\n    IMFilter[\"CubicSpline\"] = \"CubicSpline\";\n    IMFilter[\"Triangle\"] = \"Triangle\";\n    IMFilter[\"Welch\"] = \"Welch\";\n})(IMFilter || (IMFilter = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMFunction;\n(function (IMFunction) {\n    IMFunction[\"Polynomial\"] = \"Polynomial\";\n    IMFunction[\"Sinusoid\"] = \"Sinusoid\";\n    IMFunction[\"ArcSin\"] = \"ArcSin\";\n    IMFunction[\"ArcTan\"] = \"ArcTan\";\n})(IMFunction || (IMFunction = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMGradient;\n(function (IMGradient) {\n    IMGradient[\"Linear\"] = \"Linear\";\n    IMGradient[\"Radial\"] = \"Radial\";\n})(IMGradient || (IMGradient = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMGravity;\n(function (IMGravity) {\n    IMGravity[\"None\"] = \"None\";\n    IMGravity[\"Center\"] = \"Center\";\n    IMGravity[\"East\"] = \"East\";\n    IMGravity[\"Forget\"] = \"Forget\";\n    IMGravity[\"NorthEast\"] = \"NorthEast\";\n    IMGravity[\"North\"] = \"North\";\n    IMGravity[\"NorthWest\"] = \"NorthWest\";\n    IMGravity[\"SouthEast\"] = \"SouthEast\";\n    IMGravity[\"South\"] = \"South\";\n    IMGravity[\"SouthWest\"] = \"SouthWest\";\n    IMGravity[\"West\"] = \"West\";\n})(IMGravity || (IMGravity = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMIntensity;\n(function (IMIntensity) {\n    IMIntensity[\"Average\"] = \"Average\";\n    IMIntensity[\"Brightness\"] = \"Brightness\";\n    IMIntensity[\"Lightness\"] = \"Lightness\";\n    IMIntensity[\"Mean\"] = \"Mean\";\n    IMIntensity[\"MS\"] = \"MS\";\n    IMIntensity[\"Rec601Luma\"] = \"Rec601Luma\";\n    IMIntensity[\"Rec601Luminance\"] = \"Rec601Luminance\";\n    IMIntensity[\"Rec709Luma\"] = \"Rec709Luma\";\n    IMIntensity[\"Rec709Luminance\"] = \"Rec709Luminance\";\n    IMIntensity[\"RMS\"] = \"RMS\";\n})(IMIntensity || (IMIntensity = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMIntent;\n(function (IMIntent) {\n    IMIntent[\"Absolute\"] = \"Absolute\";\n    IMIntent[\"Perceptual\"] = \"Perceptual\";\n    IMIntent[\"Relative\"] = \"Relative\";\n    IMIntent[\"Saturation\"] = \"Saturation\";\n})(IMIntent || (IMIntent = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMInterlace;\n(function (IMInterlace) {\n    IMInterlace[\"Line\"] = \"Line\";\n    IMInterlace[\"None\"] = \"None\";\n    IMInterlace[\"Plane\"] = \"Plane\";\n    IMInterlace[\"Partition\"] = \"Partition\";\n    IMInterlace[\"GIF\"] = \"GIF\";\n    IMInterlace[\"JPEG\"] = \"JPEG\";\n    IMInterlace[\"PNG\"] = \"PNG\";\n})(IMInterlace || (IMInterlace = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMInterpolate;\n(function (IMInterpolate) {\n    IMInterpolate[\"Average\"] = \"Average\";\n    IMInterpolate[\"Average4\"] = \"Average4\";\n    IMInterpolate[\"Average9\"] = \"Average9\";\n    IMInterpolate[\"Average16\"] = \"Average16\";\n    IMInterpolate[\"Background\"] = \"Background\";\n    IMInterpolate[\"Bilinear\"] = \"Bilinear\";\n    IMInterpolate[\"Blend\"] = \"Blend\";\n    IMInterpolate[\"Catrom\"] = \"Catrom\";\n    IMInterpolate[\"Integer\"] = \"Integer\";\n    IMInterpolate[\"Mesh\"] = \"Mesh\";\n    IMInterpolate[\"Nearest\"] = \"Nearest\";\n    IMInterpolate[\"Spline\"] = \"Spline\";\n})(IMInterpolate || (IMInterpolate = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMKernel;\n(function (IMKernel) {\n    IMKernel[\"Unity\"] = \"Unity\";\n    IMKernel[\"Gaussian\"] = \"Gaussian\";\n    IMKernel[\"DoG\"] = \"DoG\";\n    IMKernel[\"LoG\"] = \"LoG\";\n    IMKernel[\"Blur\"] = \"Blur\";\n    IMKernel[\"Comet\"] = \"Comet\";\n    IMKernel[\"Binomial\"] = \"Binomial\";\n    IMKernel[\"Laplacian\"] = \"Laplacian\";\n    IMKernel[\"Sobel\"] = \"Sobel\";\n    IMKernel[\"FreiChen\"] = \"FreiChen\";\n    IMKernel[\"Roberts\"] = \"Roberts\";\n    IMKernel[\"Prewitt\"] = \"Prewitt\";\n    IMKernel[\"Compass\"] = \"Compass\";\n    IMKernel[\"Kirsch\"] = \"Kirsch\";\n    IMKernel[\"Diamond\"] = \"Diamond\";\n    IMKernel[\"Square\"] = \"Square\";\n    IMKernel[\"Rectangle\"] = \"Rectangle\";\n    IMKernel[\"Disk\"] = \"Disk\";\n    IMKernel[\"Octagon\"] = \"Octagon\";\n    IMKernel[\"Plus\"] = \"Plus\";\n    IMKernel[\"Cross\"] = \"Cross\";\n    IMKernel[\"Ring\"] = \"Ring\";\n    IMKernel[\"Peaks\"] = \"Peaks\";\n    IMKernel[\"Edges\"] = \"Edges\";\n    IMKernel[\"Corners\"] = \"Corners\";\n    IMKernel[\"Diagonals\"] = \"Diagonals\";\n    IMKernel[\"LineEnds\"] = \"LineEnds\";\n    IMKernel[\"LineJunctions\"] = \"LineJunctions\";\n    IMKernel[\"Ridges\"] = \"Ridges\";\n    IMKernel[\"ConvexHull\"] = \"ConvexHull\";\n    IMKernel[\"ThinSe\"] = \"ThinSe\";\n    IMKernel[\"Skeleton\"] = \"Skeleton\";\n    IMKernel[\"Chebyshev\"] = \"Chebyshev\";\n    IMKernel[\"Manhattan\"] = \"Manhattan\";\n    IMKernel[\"Octagonal\"] = \"Octagonal\";\n    IMKernel[\"Euclidean\"] = \"Euclidean\";\n})(IMKernel || (IMKernel = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMLayers;\n(function (IMLayers) {\n    IMLayers[\"Coalesce\"] = \"Coalesce\";\n    IMLayers[\"CompareAny\"] = \"CompareAny\";\n    IMLayers[\"CompareClear\"] = \"CompareClear\";\n    IMLayers[\"CompareOverlay\"] = \"CompareOverlay\";\n    IMLayers[\"Dispose\"] = \"Dispose\";\n    IMLayers[\"Optimize\"] = \"Optimize\";\n    IMLayers[\"OptimizeFrame\"] = \"OptimizeFrame\";\n    IMLayers[\"OptimizePlus\"] = \"OptimizePlus\";\n    IMLayers[\"OptimizeTransparency\"] = \"OptimizeTransparency\";\n    IMLayers[\"RemoveDups\"] = \"RemoveDups\";\n    IMLayers[\"RemoveZero\"] = \"RemoveZero\";\n    IMLayers[\"Composite\"] = \"Composite\";\n    IMLayers[\"Merge\"] = \"Merge\";\n    IMLayers[\"Flatten\"] = \"Flatten\";\n    IMLayers[\"Mosaic\"] = \"Mosaic\";\n    IMLayers[\"TrimBounds\"] = \"TrimBounds\";\n})(IMLayers || (IMLayers = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMLineCap;\n(function (IMLineCap) {\n    IMLineCap[\"Butt\"] = \"Butt\";\n    IMLineCap[\"Round\"] = \"Round\";\n    IMLineCap[\"Square\"] = \"Square\";\n})(IMLineCap || (IMLineCap = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMLineJoin;\n(function (IMLineJoin) {\n    IMLineJoin[\"Bevel\"] = \"Bevel\";\n    IMLineJoin[\"Miter\"] = \"Miter\";\n    IMLineJoin[\"Round\"] = \"Round\";\n})(IMLineJoin || (IMLineJoin = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMList;\n(function (IMList) {\n    IMList[\"Align\"] = \"Align\";\n    IMList[\"Alpha\"] = \"Alpha\";\n    IMList[\"AutoThreshold\"] = \"AutoThreshold\";\n    IMList[\"Boolean\"] = \"Boolean\";\n    IMList[\"Cache\"] = \"Cache\";\n    IMList[\"Channel\"] = \"Channel\";\n    IMList[\"Class\"] = \"Class\";\n    IMList[\"CLI\"] = \"CLI\";\n    IMList[\"ClipPath\"] = \"ClipPath\";\n    IMList[\"Coder\"] = \"Coder\";\n    IMList[\"Color\"] = \"Color\";\n    IMList[\"Colorspace\"] = \"Colorspace\";\n    IMList[\"Command\"] = \"Command\";\n    IMList[\"Compliance\"] = \"Compliance\";\n    IMList[\"Complex\"] = \"Complex\";\n    IMList[\"Compose\"] = \"Compose\";\n    IMList[\"Compress\"] = \"Compress\";\n    IMList[\"Configure\"] = \"Configure\";\n    IMList[\"DataType\"] = \"DataType\";\n    IMList[\"Debug\"] = \"Debug\";\n    IMList[\"Decoration\"] = \"Decoration\";\n    IMList[\"Delegate\"] = \"Delegate\";\n    IMList[\"Direction\"] = \"Direction\";\n    IMList[\"Dispose\"] = \"Dispose\";\n    IMList[\"Distort\"] = \"Distort\";\n    IMList[\"Dither\"] = \"Dither\";\n    IMList[\"Endian\"] = \"Endian\";\n    IMList[\"Evaluate\"] = \"Evaluate\";\n    IMList[\"FillRule\"] = \"FillRule\";\n    IMList[\"Filter\"] = \"Filter\";\n    IMList[\"Font\"] = \"Font\";\n    IMList[\"Format\"] = \"Format\";\n    IMList[\"Function\"] = \"Function\";\n    IMList[\"Gradient\"] = \"Gradient\";\n    IMList[\"Gravity\"] = \"Gravity\";\n    IMList[\"Intensity\"] = \"Intensity\";\n    IMList[\"Intent\"] = \"Intent\";\n    IMList[\"Interlace\"] = \"Interlace\";\n    IMList[\"Interpolate\"] = \"Interpolate\";\n    IMList[\"Kernel\"] = \"Kernel\";\n    IMList[\"Layers\"] = \"Layers\";\n    IMList[\"LineCap\"] = \"LineCap\";\n    IMList[\"LineJoin\"] = \"LineJoin\";\n    IMList[\"List\"] = \"List\";\n    IMList[\"Locale\"] = \"Locale\";\n    IMList[\"LogEvent\"] = \"LogEvent\";\n    IMList[\"Log\"] = \"Log\";\n    IMList[\"Magic\"] = \"Magic\";\n    IMList[\"Method\"] = \"Method\";\n    IMList[\"Metric\"] = \"Metric\";\n    IMList[\"Mime\"] = \"Mime\";\n    IMList[\"Mode\"] = \"Mode\";\n    IMList[\"Morphology\"] = \"Morphology\";\n    IMList[\"Module\"] = \"Module\";\n    IMList[\"Noise\"] = \"Noise\";\n    IMList[\"Orientation\"] = \"Orientation\";\n    IMList[\"PixelChannel\"] = \"PixelChannel\";\n    IMList[\"PixelIntensity\"] = \"PixelIntensity\";\n    IMList[\"PixelMask\"] = \"PixelMask\";\n    IMList[\"PixelTrait\"] = \"PixelTrait\";\n    IMList[\"Policy\"] = \"Policy\";\n    IMList[\"PolicyDomain\"] = \"PolicyDomain\";\n    IMList[\"PolicyRights\"] = \"PolicyRights\";\n    IMList[\"Preview\"] = \"Preview\";\n    IMList[\"Primitive\"] = \"Primitive\";\n    IMList[\"QuantumFormat\"] = \"QuantumFormat\";\n    IMList[\"Resource\"] = \"Resource\";\n    IMList[\"SparseColor\"] = \"SparseColor\";\n    IMList[\"Statistic\"] = \"Statistic\";\n    IMList[\"Storage\"] = \"Storage\";\n    IMList[\"Stretch\"] = \"Stretch\";\n    IMList[\"Style\"] = \"Style\";\n    IMList[\"Threshold\"] = \"Threshold\";\n    IMList[\"Tool\"] = \"Tool\";\n    IMList[\"Type\"] = \"Type\";\n    IMList[\"Units\"] = \"Units\";\n    IMList[\"Validate\"] = \"Validate\";\n    IMList[\"VirtualPixel\"] = \"VirtualPixel\";\n    IMList[\"Weight\"] = \"Weight\";\n})(IMList || (IMList = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMLogEvent;\n(function (IMLogEvent) {\n    IMLogEvent[\"All\"] = \"All\";\n    IMLogEvent[\"Accelerate\"] = \"Accelerate\";\n    IMLogEvent[\"Annotate\"] = \"Annotate\";\n    IMLogEvent[\"Blob\"] = \"Blob\";\n    IMLogEvent[\"Cache\"] = \"Cache\";\n    IMLogEvent[\"Coder\"] = \"Coder\";\n    IMLogEvent[\"Command\"] = \"Command\";\n    IMLogEvent[\"Configure\"] = \"Configure\";\n    IMLogEvent[\"Deprecate\"] = \"Deprecate\";\n    IMLogEvent[\"Draw\"] = \"Draw\";\n    IMLogEvent[\"Exception\"] = \"Exception\";\n    IMLogEvent[\"Locale\"] = \"Locale\";\n    IMLogEvent[\"Module\"] = \"Module\";\n    IMLogEvent[\"None\"] = \"None\";\n    IMLogEvent[\"Pixel\"] = \"Pixel\";\n    IMLogEvent[\"Policy\"] = \"Policy\";\n    IMLogEvent[\"Resource\"] = \"Resource\";\n    IMLogEvent[\"Trace\"] = \"Trace\";\n    IMLogEvent[\"Transform\"] = \"Transform\";\n    IMLogEvent[\"User\"] = \"User\";\n    IMLogEvent[\"Wand\"] = \"Wand\";\n    IMLogEvent[\"X11\"] = \"X11\";\n})(IMLogEvent || (IMLogEvent = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMLog;\n(function (IMLog) {\n    IMLog[\"Path: /etc/ImageMagick-7/log.xml\"] = \"Path: /etc/ImageMagick-7/log.xml\";\n    IMLog[\"Console        Generations     Limit  Format\"] = \"Console        Generations     Limit  Format\";\n    IMLog[\"-------------------------------------------------------------------------------\"] = \"-------------------------------------------------------------------------------\";\n    IMLog[\"Magick-%g.log            3      2000   %t %r %u %v %d %c[%p]: %m/%f/%l/%d\\n  %e\"] = \"Magick-%g.log            3      2000   %t %r %u %v %d %c[%p]: %m/%f/%l/%d\\n  %e\";\n    IMLog[\"Path: [built-in]\"] = \"Path: [built-in]\";\n    IMLog[\"Magick-%g.log            0         0   %t %r %u %v %d %c[%p]: %m/%f/%l/%d\\n  %e\"] = \"Magick-%g.log            0         0   %t %r %u %v %d %c[%p]: %m/%f/%l/%d\\n  %e\";\n})(IMLog || (IMLog = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMMethod;\n(function (IMMethod) {\n    IMMethod[\"FillToBorder\"] = \"FillToBorder\";\n    IMMethod[\"Floodfill\"] = \"Floodfill\";\n    IMMethod[\"Point\"] = \"Point\";\n    IMMethod[\"Replace\"] = \"Replace\";\n    IMMethod[\"Reset\"] = \"Reset\";\n})(IMMethod || (IMMethod = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMMetric;\n(function (IMMetric) {\n    IMMetric[\"AE\"] = \"AE\";\n    IMMetric[\"DSSIM\"] = \"DSSIM\";\n    IMMetric[\"Fuzz\"] = \"Fuzz\";\n    IMMetric[\"MAE\"] = \"MAE\";\n    IMMetric[\"MEPP\"] = \"MEPP\";\n    IMMetric[\"MSE\"] = \"MSE\";\n    IMMetric[\"NCC\"] = \"NCC\";\n    IMMetric[\"PAE\"] = \"PAE\";\n    IMMetric[\"PHASH\"] = \"PHASH\";\n    IMMetric[\"PSNR\"] = \"PSNR\";\n    IMMetric[\"RMSE\"] = \"RMSE\";\n    IMMetric[\"SSIM\"] = \"SSIM\";\n})(IMMetric || (IMMetric = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMMode;\n(function (IMMode) {\n    IMMode[\"Concatenate\"] = \"Concatenate\";\n    IMMode[\"Frame\"] = \"Frame\";\n    IMMode[\"Unframe\"] = \"Unframe\";\n})(IMMode || (IMMode = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMMorphology;\n(function (IMMorphology) {\n    IMMorphology[\"Correlate\"] = \"Correlate\";\n    IMMorphology[\"Convolve\"] = \"Convolve\";\n    IMMorphology[\"Dilate\"] = \"Dilate\";\n    IMMorphology[\"Erode\"] = \"Erode\";\n    IMMorphology[\"Close\"] = \"Close\";\n    IMMorphology[\"Open\"] = \"Open\";\n    IMMorphology[\"DilateIntensity\"] = \"DilateIntensity\";\n    IMMorphology[\"ErodeIntensity\"] = \"ErodeIntensity\";\n    IMMorphology[\"CloseIntensity\"] = \"CloseIntensity\";\n    IMMorphology[\"OpenIntensity\"] = \"OpenIntensity\";\n    IMMorphology[\"DilateI\"] = \"DilateI\";\n    IMMorphology[\"ErodeI\"] = \"ErodeI\";\n    IMMorphology[\"CloseI\"] = \"CloseI\";\n    IMMorphology[\"OpenI\"] = \"OpenI\";\n    IMMorphology[\"Smooth\"] = \"Smooth\";\n    IMMorphology[\"EdgeOut\"] = \"EdgeOut\";\n    IMMorphology[\"EdgeIn\"] = \"EdgeIn\";\n    IMMorphology[\"Edge\"] = \"Edge\";\n    IMMorphology[\"TopHat\"] = \"TopHat\";\n    IMMorphology[\"BottomHat\"] = \"BottomHat\";\n    IMMorphology[\"Hmt\"] = \"Hmt\";\n    IMMorphology[\"HitNMiss\"] = \"HitNMiss\";\n    IMMorphology[\"HitAndMiss\"] = \"HitAndMiss\";\n    IMMorphology[\"Thinning\"] = \"Thinning\";\n    IMMorphology[\"Thicken\"] = \"Thicken\";\n    IMMorphology[\"Distance\"] = \"Distance\";\n    IMMorphology[\"IterativeDistance\"] = \"IterativeDistance\";\n})(IMMorphology || (IMMorphology = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMModule;\n(function (IMModule) {\n    IMModule[\"Path: /usr/lib/ImageMagick-7.0.8/modules-Q16HDRI/coders\"] = \"Path: /usr/lib/ImageMagick-7.0.8/modules-Q16HDRI/coders\";\n    IMModule[\"Image Coder\"] = \"Image Coder\";\n    IMModule[\"-------------------------------------------------------------------------------\"] = \"-------------------------------------------------------------------------------\";\n    IMModule[\"aai\"] = \"aai\";\n    IMModule[\"art\"] = \"art\";\n    IMModule[\"avs\"] = \"avs\";\n    IMModule[\"bgr\"] = \"bgr\";\n    IMModule[\"bmp\"] = \"bmp\";\n    IMModule[\"braille\"] = \"braille\";\n    IMModule[\"cals\"] = \"cals\";\n    IMModule[\"caption\"] = \"caption\";\n    IMModule[\"cin\"] = \"cin\";\n    IMModule[\"cip\"] = \"cip\";\n    IMModule[\"clip\"] = \"clip\";\n    IMModule[\"cmyk\"] = \"cmyk\";\n    IMModule[\"cut\"] = \"cut\";\n    IMModule[\"dcm\"] = \"dcm\";\n    IMModule[\"dds\"] = \"dds\";\n    IMModule[\"debug\"] = \"debug\";\n    IMModule[\"dib\"] = \"dib\";\n    IMModule[\"dng\"] = \"dng\";\n    IMModule[\"dot\"] = \"dot\";\n    IMModule[\"dpx\"] = \"dpx\";\n    IMModule[\"ept\"] = \"ept\";\n    IMModule[\"exr\"] = \"exr\";\n    IMModule[\"fax\"] = \"fax\";\n    IMModule[\"fits\"] = \"fits\";\n    IMModule[\"gif\"] = \"gif\";\n    IMModule[\"gradient\"] = \"gradient\";\n    IMModule[\"gray\"] = \"gray\";\n    IMModule[\"hald\"] = \"hald\";\n    IMModule[\"hdr\"] = \"hdr\";\n    IMModule[\"heic\"] = \"heic\";\n    IMModule[\"histogram\"] = \"histogram\";\n    IMModule[\"hrz\"] = \"hrz\";\n    IMModule[\"html\"] = \"html\";\n    IMModule[\"icon\"] = \"icon\";\n    IMModule[\"info\"] = \"info\";\n    IMModule[\"inline\"] = \"inline\";\n    IMModule[\"ipl\"] = \"ipl\";\n    IMModule[\"jbig\"] = \"jbig\";\n    IMModule[\"jnx\"] = \"jnx\";\n    IMModule[\"jp2\"] = \"jp2\";\n    IMModule[\"jpeg\"] = \"jpeg\";\n    IMModule[\"json\"] = \"json\";\n    IMModule[\"label\"] = \"label\";\n    IMModule[\"mac\"] = \"mac\";\n    IMModule[\"magick\"] = \"magick\";\n    IMModule[\"map\"] = \"map\";\n    IMModule[\"mask\"] = \"mask\";\n    IMModule[\"mat\"] = \"mat\";\n    IMModule[\"matte\"] = \"matte\";\n    IMModule[\"meta\"] = \"meta\";\n    IMModule[\"miff\"] = \"miff\";\n    IMModule[\"mono\"] = \"mono\";\n    IMModule[\"mpc\"] = \"mpc\";\n    IMModule[\"mpeg\"] = \"mpeg\";\n    IMModule[\"mpr\"] = \"mpr\";\n    IMModule[\"msl\"] = \"msl\";\n    IMModule[\"mtv\"] = \"mtv\";\n    IMModule[\"mvg\"] = \"mvg\";\n    IMModule[\"null\"] = \"null\";\n    IMModule[\"otb\"] = \"otb\";\n    IMModule[\"palm\"] = \"palm\";\n    IMModule[\"pango\"] = \"pango\";\n    IMModule[\"pattern\"] = \"pattern\";\n    IMModule[\"pcd\"] = \"pcd\";\n    IMModule[\"pcl\"] = \"pcl\";\n    IMModule[\"pcx\"] = \"pcx\";\n    IMModule[\"pdb\"] = \"pdb\";\n    IMModule[\"pdf\"] = \"pdf\";\n    IMModule[\"pes\"] = \"pes\";\n    IMModule[\"pgx\"] = \"pgx\";\n    IMModule[\"pict\"] = \"pict\";\n    IMModule[\"pix\"] = \"pix\";\n    IMModule[\"plasma\"] = \"plasma\";\n    IMModule[\"png\"] = \"png\";\n    IMModule[\"pnm\"] = \"pnm\";\n    IMModule[\"ps\"] = \"ps\";\n    IMModule[\"ps2\"] = \"ps2\";\n    IMModule[\"ps3\"] = \"ps3\";\n    IMModule[\"psd\"] = \"psd\";\n    IMModule[\"pwp\"] = \"pwp\";\n    IMModule[\"raw\"] = \"raw\";\n    IMModule[\"rgb\"] = \"rgb\";\n    IMModule[\"rgf\"] = \"rgf\";\n    IMModule[\"rla\"] = \"rla\";\n    IMModule[\"rle\"] = \"rle\";\n    IMModule[\"scr\"] = \"scr\";\n    IMModule[\"sct\"] = \"sct\";\n    IMModule[\"sfw\"] = \"sfw\";\n    IMModule[\"sgi\"] = \"sgi\";\n    IMModule[\"sixel\"] = \"sixel\";\n    IMModule[\"stegano\"] = \"stegano\";\n    IMModule[\"sun\"] = \"sun\";\n    IMModule[\"svg\"] = \"svg\";\n    IMModule[\"tga\"] = \"tga\";\n    IMModule[\"thumbnail\"] = \"thumbnail\";\n    IMModule[\"tiff\"] = \"tiff\";\n    IMModule[\"tile\"] = \"tile\";\n    IMModule[\"tim\"] = \"tim\";\n    IMModule[\"ttf\"] = \"ttf\";\n    IMModule[\"txt\"] = \"txt\";\n    IMModule[\"uil\"] = \"uil\";\n    IMModule[\"url\"] = \"url\";\n    IMModule[\"uyvy\"] = \"uyvy\";\n    IMModule[\"vicar\"] = \"vicar\";\n    IMModule[\"vid\"] = \"vid\";\n    IMModule[\"viff\"] = \"viff\";\n    IMModule[\"vips\"] = \"vips\";\n    IMModule[\"wbmp\"] = \"wbmp\";\n    IMModule[\"webp\"] = \"webp\";\n    IMModule[\"wmf\"] = \"wmf\";\n    IMModule[\"wpg\"] = \"wpg\";\n    IMModule[\"x\"] = \"x\";\n    IMModule[\"xbm\"] = \"xbm\";\n    IMModule[\"xc\"] = \"xc\";\n    IMModule[\"xcf\"] = \"xcf\";\n    IMModule[\"xpm\"] = \"xpm\";\n    IMModule[\"xps\"] = \"xps\";\n    IMModule[\"xtrn\"] = \"xtrn\";\n    IMModule[\"xwd\"] = \"xwd\";\n    IMModule[\"ycbcr\"] = \"ycbcr\";\n    IMModule[\"yuv\"] = \"yuv\";\n    IMModule[\"Path: /usr/lib/ImageMagick-7.0.8/modules-Q16HDRI/filters\"] = \"Path: /usr/lib/ImageMagick-7.0.8/modules-Q16HDRI/filters\";\n    IMModule[\"Image Filter\"] = \"Image Filter\";\n    IMModule[\"analyze\"] = \"analyze\";\n})(IMModule || (IMModule = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMNoise;\n(function (IMNoise) {\n    IMNoise[\"Gaussian\"] = \"Gaussian\";\n    IMNoise[\"Impulse\"] = \"Impulse\";\n    IMNoise[\"Laplacian\"] = \"Laplacian\";\n    IMNoise[\"Multiplicative\"] = \"Multiplicative\";\n    IMNoise[\"Poisson\"] = \"Poisson\";\n    IMNoise[\"Random\"] = \"Random\";\n    IMNoise[\"Uniform\"] = \"Uniform\";\n})(IMNoise || (IMNoise = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMOrientation;\n(function (IMOrientation) {\n    IMOrientation[\"TopLeft\"] = \"TopLeft\";\n    IMOrientation[\"TopRight\"] = \"TopRight\";\n    IMOrientation[\"BottomRight\"] = \"BottomRight\";\n    IMOrientation[\"BottomLeft\"] = \"BottomLeft\";\n    IMOrientation[\"LeftTop\"] = \"LeftTop\";\n    IMOrientation[\"RightTop\"] = \"RightTop\";\n    IMOrientation[\"RightBottom\"] = \"RightBottom\";\n    IMOrientation[\"LeftBottom\"] = \"LeftBottom\";\n})(IMOrientation || (IMOrientation = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMPixelChannel;\n(function (IMPixelChannel) {\n    IMPixelChannel[\"Undefined\"] = \"Undefined\";\n    IMPixelChannel[\"A\"] = \"A\";\n    IMPixelChannel[\"Alpha\"] = \"Alpha\";\n    IMPixelChannel[\"B\"] = \"B\";\n    IMPixelChannel[\"Bk\"] = \"Bk\";\n    IMPixelChannel[\"Black\"] = \"Black\";\n    IMPixelChannel[\"Blue\"] = \"Blue\";\n    IMPixelChannel[\"Cb\"] = \"Cb\";\n    IMPixelChannel[\"Composite\"] = \"Composite\";\n    IMPixelChannel[\"CompositeMask\"] = \"CompositeMask\";\n    IMPixelChannel[\"C\"] = \"C\";\n    IMPixelChannel[\"Cr\"] = \"Cr\";\n    IMPixelChannel[\"Cyan\"] = \"Cyan\";\n    IMPixelChannel[\"Gray\"] = \"Gray\";\n    IMPixelChannel[\"G\"] = \"G\";\n    IMPixelChannel[\"Green\"] = \"Green\";\n    IMPixelChannel[\"Index\"] = \"Index\";\n    IMPixelChannel[\"Intensity\"] = \"Intensity\";\n    IMPixelChannel[\"K\"] = \"K\";\n    IMPixelChannel[\"M\"] = \"M\";\n    IMPixelChannel[\"Magenta\"] = \"Magenta\";\n    IMPixelChannel[\"Meta\"] = \"Meta\";\n    IMPixelChannel[\"O\"] = \"O\";\n    IMPixelChannel[\"R\"] = \"R\";\n    IMPixelChannel[\"ReadMask\"] = \"ReadMask\";\n    IMPixelChannel[\"Red\"] = \"Red\";\n    IMPixelChannel[\"Sync\"] = \"Sync\";\n    IMPixelChannel[\"WriteMask\"] = \"WriteMask\";\n    IMPixelChannel[\"Y\"] = \"Y\";\n    IMPixelChannel[\"Yellow\"] = \"Yellow\";\n})(IMPixelChannel || (IMPixelChannel = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMPixelIntensity;\n(function (IMPixelIntensity) {\n    IMPixelIntensity[\"Average\"] = \"Average\";\n    IMPixelIntensity[\"Brightness\"] = \"Brightness\";\n    IMPixelIntensity[\"Lightness\"] = \"Lightness\";\n    IMPixelIntensity[\"Mean\"] = \"Mean\";\n    IMPixelIntensity[\"MS\"] = \"MS\";\n    IMPixelIntensity[\"Rec601Luma\"] = \"Rec601Luma\";\n    IMPixelIntensity[\"Rec601Luminance\"] = \"Rec601Luminance\";\n    IMPixelIntensity[\"Rec709Luma\"] = \"Rec709Luma\";\n    IMPixelIntensity[\"Rec709Luminance\"] = \"Rec709Luminance\";\n    IMPixelIntensity[\"RMS\"] = \"RMS\";\n})(IMPixelIntensity || (IMPixelIntensity = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMPixelMask;\n(function (IMPixelMask) {\n    IMPixelMask[\"R\"] = \"R\";\n    IMPixelMask[\"Read\"] = \"Read\";\n    IMPixelMask[\"W\"] = \"W\";\n    IMPixelMask[\"Write\"] = \"Write\";\n})(IMPixelMask || (IMPixelMask = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMPixelTrait;\n(function (IMPixelTrait) {\n    IMPixelTrait[\"Blend\"] = \"Blend\";\n    IMPixelTrait[\"Copy\"] = \"Copy\";\n    IMPixelTrait[\"Update\"] = \"Update\";\n})(IMPixelTrait || (IMPixelTrait = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMPolicyDomain;\n(function (IMPolicyDomain) {\n    IMPolicyDomain[\"Cache\"] = \"Cache\";\n    IMPolicyDomain[\"Coder\"] = \"Coder\";\n    IMPolicyDomain[\"Delegate\"] = \"Delegate\";\n    IMPolicyDomain[\"Filter\"] = \"Filter\";\n    IMPolicyDomain[\"Module\"] = \"Module\";\n    IMPolicyDomain[\"Path\"] = \"Path\";\n    IMPolicyDomain[\"Resource\"] = \"Resource\";\n    IMPolicyDomain[\"System\"] = \"System\";\n})(IMPolicyDomain || (IMPolicyDomain = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMPolicyRights;\n(function (IMPolicyRights) {\n    IMPolicyRights[\"All\"] = \"All\";\n    IMPolicyRights[\"Execute\"] = \"Execute\";\n    IMPolicyRights[\"None\"] = \"None\";\n    IMPolicyRights[\"Read\"] = \"Read\";\n    IMPolicyRights[\"Write\"] = \"Write\";\n})(IMPolicyRights || (IMPolicyRights = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMPreview;\n(function (IMPreview) {\n    IMPreview[\"AddNoise\"] = \"AddNoise\";\n    IMPreview[\"Blur\"] = \"Blur\";\n    IMPreview[\"Brightness\"] = \"Brightness\";\n    IMPreview[\"Charcoal\"] = \"Charcoal\";\n    IMPreview[\"Despeckle\"] = \"Despeckle\";\n    IMPreview[\"Dull\"] = \"Dull\";\n    IMPreview[\"EdgeDetect\"] = \"EdgeDetect\";\n    IMPreview[\"Gamma\"] = \"Gamma\";\n    IMPreview[\"Grayscale\"] = \"Grayscale\";\n    IMPreview[\"Hue\"] = \"Hue\";\n    IMPreview[\"Implode\"] = \"Implode\";\n    IMPreview[\"JPEG\"] = \"JPEG\";\n    IMPreview[\"OilPaint\"] = \"OilPaint\";\n    IMPreview[\"Quantize\"] = \"Quantize\";\n    IMPreview[\"Raise\"] = \"Raise\";\n    IMPreview[\"ReduceNoise\"] = \"ReduceNoise\";\n    IMPreview[\"Roll\"] = \"Roll\";\n    IMPreview[\"Rotate\"] = \"Rotate\";\n    IMPreview[\"Saturation\"] = \"Saturation\";\n    IMPreview[\"Segment\"] = \"Segment\";\n    IMPreview[\"Shade\"] = \"Shade\";\n    IMPreview[\"Sharpen\"] = \"Sharpen\";\n    IMPreview[\"Shear\"] = \"Shear\";\n    IMPreview[\"Solarize\"] = \"Solarize\";\n    IMPreview[\"Spiff\"] = \"Spiff\";\n    IMPreview[\"Spread\"] = \"Spread\";\n    IMPreview[\"Swirl\"] = \"Swirl\";\n    IMPreview[\"Threshold\"] = \"Threshold\";\n    IMPreview[\"Wave\"] = \"Wave\";\n})(IMPreview || (IMPreview = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMPrimitive;\n(function (IMPrimitive) {\n    IMPrimitive[\"Alpha\"] = \"Alpha\";\n    IMPrimitive[\"Arc\"] = \"Arc\";\n    IMPrimitive[\"Bezier\"] = \"Bezier\";\n    IMPrimitive[\"Circle\"] = \"Circle\";\n    IMPrimitive[\"Color\"] = \"Color\";\n    IMPrimitive[\"Ellipse\"] = \"Ellipse\";\n    IMPrimitive[\"Image\"] = \"Image\";\n    IMPrimitive[\"Line\"] = \"Line\";\n    IMPrimitive[\"Matte\"] = \"Matte\";\n    IMPrimitive[\"Path\"] = \"Path\";\n    IMPrimitive[\"Point\"] = \"Point\";\n    IMPrimitive[\"Polygon\"] = \"Polygon\";\n    IMPrimitive[\"Polyline\"] = \"Polyline\";\n    IMPrimitive[\"Rectangle\"] = \"Rectangle\";\n    IMPrimitive[\"RoundRectangle\"] = \"RoundRectangle\";\n    IMPrimitive[\"Text\"] = \"Text\";\n})(IMPrimitive || (IMPrimitive = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMQuantumFormat;\n(function (IMQuantumFormat) {\n    IMQuantumFormat[\"FloatingPoint\"] = \"FloatingPoint\";\n    IMQuantumFormat[\"Signed\"] = \"Signed\";\n    IMQuantumFormat[\"Unsigned\"] = \"Unsigned\";\n})(IMQuantumFormat || (IMQuantumFormat = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMSparseColor;\n(function (IMSparseColor) {\n    IMSparseColor[\"Barycentric\"] = \"Barycentric\";\n    IMSparseColor[\"Bilinear\"] = \"Bilinear\";\n    IMSparseColor[\"Inverse\"] = \"Inverse\";\n    IMSparseColor[\"Shepards\"] = \"Shepards\";\n    IMSparseColor[\"Voronoi\"] = \"Voronoi\";\n    IMSparseColor[\"Manhattan\"] = \"Manhattan\";\n})(IMSparseColor || (IMSparseColor = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMStatistic;\n(function (IMStatistic) {\n    IMStatistic[\"Gradient\"] = \"Gradient\";\n    IMStatistic[\"Maximum\"] = \"Maximum\";\n    IMStatistic[\"Mean\"] = \"Mean\";\n    IMStatistic[\"Median\"] = \"Median\";\n    IMStatistic[\"Minimum\"] = \"Minimum\";\n    IMStatistic[\"Mode\"] = \"Mode\";\n    IMStatistic[\"NonPeak\"] = \"NonPeak\";\n    IMStatistic[\"RootMeanSquare\"] = \"RootMeanSquare\";\n    IMStatistic[\"RMS\"] = \"RMS\";\n    IMStatistic[\"StandardDeviation\"] = \"StandardDeviation\";\n})(IMStatistic || (IMStatistic = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMStorage;\n(function (IMStorage) {\n    IMStorage[\"Char\"] = \"Char\";\n    IMStorage[\"Double\"] = \"Double\";\n    IMStorage[\"Float\"] = \"Float\";\n    IMStorage[\"Long\"] = \"Long\";\n    IMStorage[\"LongLong\"] = \"LongLong\";\n    IMStorage[\"Quantum\"] = \"Quantum\";\n    IMStorage[\"Short\"] = \"Short\";\n})(IMStorage || (IMStorage = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMStretch;\n(function (IMStretch) {\n    IMStretch[\"Any\"] = \"Any\";\n    IMStretch[\"Condensed\"] = \"Condensed\";\n    IMStretch[\"Expanded\"] = \"Expanded\";\n    IMStretch[\"ExtraCondensed\"] = \"ExtraCondensed\";\n    IMStretch[\"ExtraExpanded\"] = \"ExtraExpanded\";\n    IMStretch[\"Normal\"] = \"Normal\";\n    IMStretch[\"SemiCondensed\"] = \"SemiCondensed\";\n    IMStretch[\"SemiExpanded\"] = \"SemiExpanded\";\n    IMStretch[\"UltraCondensed\"] = \"UltraCondensed\";\n    IMStretch[\"UltraExpanded\"] = \"UltraExpanded\";\n})(IMStretch || (IMStretch = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMStyle;\n(function (IMStyle) {\n    IMStyle[\"Any\"] = \"Any\";\n    IMStyle[\"Bold\"] = \"Bold\";\n    IMStyle[\"Italic\"] = \"Italic\";\n    IMStyle[\"Normal\"] = \"Normal\";\n    IMStyle[\"Oblique\"] = \"Oblique\";\n})(IMStyle || (IMStyle = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMTool;\n(function (IMTool) {\n    IMTool[\"animate\"] = \"animate\";\n    IMTool[\"compare\"] = \"compare\";\n    IMTool[\"composite\"] = \"composite\";\n    IMTool[\"conjure\"] = \"conjure\";\n    IMTool[\"convert\"] = \"convert\";\n    IMTool[\"display\"] = \"display\";\n    IMTool[\"identify\"] = \"identify\";\n    IMTool[\"import\"] = \"import\";\n    IMTool[\"mogrify\"] = \"mogrify\";\n    IMTool[\"montage\"] = \"montage\";\n    IMTool[\"stream\"] = \"stream\";\n})(IMTool || (IMTool = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMType;\n(function (IMType) {\n    IMType[\"Bilevel\"] = \"Bilevel\";\n    IMType[\"ColorSeparation\"] = \"ColorSeparation\";\n    IMType[\"ColorSeparationAlpha\"] = \"ColorSeparationAlpha\";\n    IMType[\"ColorSeparationMatte\"] = \"ColorSeparationMatte\";\n    IMType[\"Grayscale\"] = \"Grayscale\";\n    IMType[\"GrayscaleAlpha\"] = \"GrayscaleAlpha\";\n    IMType[\"GrayscaleMatte\"] = \"GrayscaleMatte\";\n    IMType[\"Optimize\"] = \"Optimize\";\n    IMType[\"Palette\"] = \"Palette\";\n    IMType[\"PaletteBilevelAlpha\"] = \"PaletteBilevelAlpha\";\n    IMType[\"PaletteBilevelMatte\"] = \"PaletteBilevelMatte\";\n    IMType[\"PaletteAlpha\"] = \"PaletteAlpha\";\n    IMType[\"PaletteMatte\"] = \"PaletteMatte\";\n    IMType[\"TrueColorAlpha\"] = \"TrueColorAlpha\";\n    IMType[\"TrueColorMatte\"] = \"TrueColorMatte\";\n    IMType[\"TrueColor\"] = \"TrueColor\";\n})(IMType || (IMType = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMUnits;\n(function (IMUnits) {\n    IMUnits[\"PixelsPerInch\"] = \"PixelsPerInch\";\n    IMUnits[\"PixelsPerCentimeter\"] = \"PixelsPerCentimeter\";\n    IMUnits[\"1_\"] = \"1\";\n    IMUnits[\"2_\"] = \"2\";\n    IMUnits[\"3_\"] = \"3\";\n})(IMUnits || (IMUnits = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMValidate;\n(function (IMValidate) {\n    IMValidate[\"All\"] = \"All\";\n    IMValidate[\"Colorspace\"] = \"Colorspace\";\n    IMValidate[\"Compare\"] = \"Compare\";\n    IMValidate[\"Composite\"] = \"Composite\";\n    IMValidate[\"Convert\"] = \"Convert\";\n    IMValidate[\"FormatsDisk\"] = \"FormatsDisk\";\n    IMValidate[\"FormatsMap\"] = \"FormatsMap\";\n    IMValidate[\"FormatsMemory\"] = \"FormatsMemory\";\n    IMValidate[\"Identify\"] = \"Identify\";\n    IMValidate[\"ImportExport\"] = \"ImportExport\";\n    IMValidate[\"Montage\"] = \"Montage\";\n    IMValidate[\"Stream\"] = \"Stream\";\n    IMValidate[\"None\"] = \"None\";\n})(IMValidate || (IMValidate = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMVirtualPixel;\n(function (IMVirtualPixel) {\n    IMVirtualPixel[\"Background\"] = \"Background\";\n    IMVirtualPixel[\"Black\"] = \"Black\";\n    IMVirtualPixel[\"CheckerTile\"] = \"CheckerTile\";\n    IMVirtualPixel[\"Dither\"] = \"Dither\";\n    IMVirtualPixel[\"Edge\"] = \"Edge\";\n    IMVirtualPixel[\"Gray\"] = \"Gray\";\n    IMVirtualPixel[\"HorizontalTile\"] = \"HorizontalTile\";\n    IMVirtualPixel[\"HorizontalTileEdge\"] = \"HorizontalTileEdge\";\n    IMVirtualPixel[\"Mirror\"] = \"Mirror\";\n    IMVirtualPixel[\"None\"] = \"None\";\n    IMVirtualPixel[\"Random\"] = \"Random\";\n    IMVirtualPixel[\"Tile\"] = \"Tile\";\n    IMVirtualPixel[\"Transparent\"] = \"Transparent\";\n    IMVirtualPixel[\"VerticalTile\"] = \"VerticalTile\";\n    IMVirtualPixel[\"VerticalTileEdge\"] = \"VerticalTileEdge\";\n    IMVirtualPixel[\"White\"] = \"White\";\n})(IMVirtualPixel || (IMVirtualPixel = {}));\n\n/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nvar IMWeight;\n(function (IMWeight) {\n    IMWeight[\"Thin\"] = \"Thin\";\n    IMWeight[\"ExtraLight\"] = \"ExtraLight\";\n    IMWeight[\"UltraLight\"] = \"UltraLight\";\n    IMWeight[\"Normal\"] = \"Normal\";\n    IMWeight[\"Regular\"] = \"Regular\";\n    IMWeight[\"Medium\"] = \"Medium\";\n    IMWeight[\"DemiBold\"] = \"DemiBold\";\n    IMWeight[\"SemiBold\"] = \"SemiBold\";\n    IMWeight[\"Bold\"] = \"Bold\";\n    IMWeight[\"ExtraBold\"] = \"ExtraBold\";\n    IMWeight[\"UltraBold\"] = \"UltraBold\";\n    IMWeight[\"Heavy\"] = \"Heavy\";\n    IMWeight[\"Black\"] = \"Black\";\n})(IMWeight || (IMWeight = {}));\n\n\n//# sourceMappingURL=wasm-imagemagick.esm-es2018.js.map\n\n\n//# sourceURL=webpack:///./src/wasm-imagemagick.esm-es2018.js?");

/***/ })

/******/ });